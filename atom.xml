<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>webBox.io</title>
 <link href="http://blog.webbox.io/atom.xml" rel="self"/>
 <link href="http://blog.webbox.io/"/>
 <updated>2016-06-04T12:55:48+03:00</updated>
 <id>http://blog.webbox.io</id>
 <author>
   <name>webBox.io Team</name>
   <email></email>
 </author>

 
 <entry>
   <title>Ruby argument references</title>
   <link href="http://blog.webbox.io/2015/03/06/ruby-argument-references/"/>
   <updated>2015-03-06T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2015/03/06/ruby-argument-references</id>
   <content type="html"><![CDATA[<p>Yet another cool feature of Ruby! I’ve never seen such a thing in other languages
such as Php, Python or JavaScript. Let’s take a look at it:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">user_ratio</span><span class="p">(</span><span class="n">age</span><span class="p">,</span> <span class="n">val</span><span class="o">=</span><span class="n">age</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
  <span class="s2">&quot;Your age: </span><span class="si">#{</span><span class="n">age</span><span class="si">}</span><span class="s2"> and val: </span><span class="si">#{</span><span class="n">val</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="n">user_ratio</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Your age: 42 and val: 84&quot;</span>
</code></pre></div>
<p>This small method requires two arguments. First argument is <code>age</code> and it’s
default value is not defined. Next argument is <code>val</code> and it’s default
value is a <strong>reference to the first argument</strong> and making a multiplication
with number 2 if the second argument is not provided.</p>

<p>If we use the second argument:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">user_ratio</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Your age: 42 and val: 10&quot;</span>
</code></pre></div>
<p>method works as expected. Don’t you think It’s cool?</p>
]]></content>
 </entry>
 
 <entry>
   <title>Unit test your client-side JavaScript</title>
   <link href="http://blog.webbox.io/2014/11/26/unit-test-your-client-side-javascript/"/>
   <updated>2014-11-26T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2014/11/26/unit-test-your-client-side-javascript</id>
   <content type="html"><![CDATA[<p>I don&#39;t think that we have to discuss the importance of having tests.
That&#39;s not something that we add to the project in addition. That&#39;s something
that the project is based on.</p>

<p>And because testing is so important we have bunch of tools in our disposal.
We all know (I hope) how to test our back-end code.</p>

<p>However, once we move to the front-end is a bit different. At the moment 
<a href="http://trialreach.com/">we</a> are working on a big single page application and 
testing is one of our main focuses.</p>

<p>In this article you will see how to unit test our client-side JavaScript. </p>

<h2>The example</h2>

<p>In order to illustrate the problem and its solution we will create a simple <a href="https://angularjs.org/">AngularJS</a> application. AngularJS because it is a popular framework and probably you are familiar with it. Originally the concepts described in this article were applied to a project that uses <a href="http://www.ractivejs.org/">Ractive.js</a> but it works for AngularJS and it will probably work for <a href="http://emberjs.com/">Ember.js</a> or <a href="http://backbonejs.org/">Backbone.js</a>.</p>

<p>Let&#39;s say that we have a menu and the last link there shows a form for registering a new user. The fields in the form have some validation mechanisms. The are mandatory and have requirements for a minimum number of letters. Overall the example looks like that:</p>

<p><img src="/assets/post_images/unittestclientside/app.gif" alt="Unit test your client-side JavaScript"></p>

<p>We have a placeholder below the form that shows an error message.</p>

<p>Here is the code that we start with:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">ng-app=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;./css/styles.css&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./vendor/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>

      <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[])</span>
      <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;Controller&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{})</span>
      <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;registerForm&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">...</span>
      <span class="p">})</span>
      <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;appHeader&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">...</span>
      <span class="p">});</span>

    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;Controller&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;app-header&gt;&lt;/app-header&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div>
<p>In AngularJS we have something called <em>directive</em>. Shortly, we may use this to encapsulate logic. That logic may be represented by a custom tag that we add to the page. <em>appHeader</em> directive displays the menu that we saw on the animated GIF above. Here is the implementation:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;appHeader&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">link</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">scope</span><span class="p">.</span><span class="nx">showRegisterForm</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="nx">element</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;register-form&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
        <span class="nx">display</span><span class="o">:</span> <span class="s1">&#39;block&#39;</span>
      <span class="p">})</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
    <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;\</span>
<span class="s1">      &lt;header&gt;\</span>
<span class="s1">        &lt;ul&gt;\</span>
<span class="s1">          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Fake button&lt;/a&gt;&lt;/li&gt;\</span>
<span class="s1">          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another fake button&lt;/a&gt;&lt;/li&gt;\</span>
<span class="s1">          &lt;li&gt;&lt;a href=&quot;#&quot; ng-click=&quot;showRegisterForm()&quot;&gt;Register&lt;/a&gt;&lt;/li&gt;\</span>
<span class="s1">        &lt;/ul&gt;\</span>
<span class="s1">        &lt;register-form class=&quot;register-form&quot; /&gt;\</span>
<span class="s1">      &lt;/header&gt;\</span>
<span class="s1">    &#39;</span><span class="p">,</span>
    <span class="nx">link</span><span class="o">:</span> <span class="nx">link</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>We define the markup directly into the JavaScript code which is not the best approach for dealing with templates. However, to simplify the example we will use this technique. Here we see the <code>&lt;register-form&gt;</code> tag that represents the form with the input fields.</p>

<p>The <code>registerForm</code> directive contains the fields&#39; validation. Again, the template is placed directly inside the directive&#39;s definition:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;registerForm&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
    <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;\</span>
<span class="s1">      &lt;form&gt;\</span>
<span class="s1">        &lt;p&gt;Please fill the form below&lt;/p&gt;\</span>
<span class="s1">        &lt;label for=&quot;username&quot;&gt;Your name&lt;/label&gt;\</span>
<span class="s1">        &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; ng-model=&quot;username&quot; /&gt;\</span>
<span class="s1">        &lt;label for=&quot;username&quot;&gt;Password&lt;/label&gt;\</span>
<span class="s1">        &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; ng-model=&quot;password&quot;/&gt;\</span>
<span class="s1">        &lt;br /&gt;\</span>
<span class="s1">        &lt;input type=&quot;button&quot; value=&quot;register&quot; ng-click=&quot;register()&quot; id=&quot;register-button&quot; /&gt;\</span>
<span class="s1">        &lt;br /&gt;\</span>
<span class="s1">        &lt;span id=&quot;message&quot;&gt;&lt;/span&gt;\</span>
<span class="s1">      &lt;/form&gt;\</span>
<span class="s1">    &#39;</span><span class="p">,</span>
    <span class="nx">controller</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>      
      <span class="kd">var</span> <span class="nx">validateInput</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">u</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">username</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">password</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">u</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span> <span class="o">||</span> <span class="nx">u</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Missing username.&#39;</span><span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">p</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span> <span class="o">||</span> <span class="nx">p</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Missing password.&#39;</span><span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Too short username.&#39;</span><span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Too short password.&#39;</span><span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span> <span class="nx">status</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span>
      <span class="p">}</span>
      <span class="nx">$scope</span><span class="p">.</span><span class="nx">register</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">isValid</span> <span class="o">=</span> <span class="nx">validateInput</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="kc">false</span> <span class="o">===</span> <span class="nx">isValid</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">$scope</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="nx">isValid</span><span class="p">.</span><span class="nx">message</span><span class="p">;</span>
          <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">$scope</span><span class="p">.</span><span class="nx">message</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div>
<p>A little bit more code but it is again fairly simple. The key point in that directive is the <code>validateInput</code> method. It processes the input typed by the user and decides if it is a valid or not. It also chooses and displays the proper error message.</p>

<h2>Show me the unit ...</h2>

<p>Now it gets interesting. How we are going to unit test our application? The first thing and maybe the most important one is to divide the application into small isolated modules so we form units. In the example above the two directives may be considered as units. The header does not contain custom logic and basically there is nothing to test there. Yes, we have a <em>click</em> handler, but we do not have to write tests for that. That is part of the framework and we expect that the guys from Google tested it already. A lot more interesting is the registration form. We want to make sure that whatever the user types into the fields our directive will react properly. </p>

<p>We need to extract <code>registerForm</code> from the other code. If we look closer we will see that the directives in AngularJS are nothing but functions. So we may change our code to:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// a new file register-form.js</span>
<span class="nx">registerFormDirective</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
    <span class="p">...</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// main file</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;./js/register-form.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[])</span>
<span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;Controller&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{})</span>
<span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;registerForm&#39;</span><span class="p">,</span> <span class="nx">registerFormDirective</span><span class="p">)</span>
<span class="p">...</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>
</code></pre></div>
<p>We moved the definition to the global scope and later use it in the main file. (it&#39;s really a good practice to use the global scope but let&#39;s keep it simple)</p>

<p>Now we have a simple JavaScript function that may be called from anywhere most importantly could be tested. </p>

<h2>Writing the test</h2>

<p>There are few popular approaches for testing client-side JavaScript. </p>

<ul>
<li>Of course, the trivial one is to write the test and run it into the browser. This makes sense if you work in a small team and you all agree to run the tests before deploying. However, that&#39;s not a good option if your company is a big one. You can not trust yourself or your colleagues for dealing with one additional step before shipping the code. This process should be automated. Or in other words it should be integrated into the deployment setup.</li>
<li>There are headless browsers like <a href="http://phantomjs.org">PhantomJS</a> or <a href="https://code.google.com/p/selenium/">Selenium</a> that programmatically visit our pages and interact with them. If we take this way we will avoid the manual running of the tests. The problem is that we are not running unit tests, we are doing integration testing. Our <code>registerForm</code> directive may be unit tested only if we create a separate page for it. This definitely does not scale. So, this option is good for integration but not unit testing.</li>
<li>The last option, and the one that we are going to use, solves both of the problems above - automation and unit testing. We are not going to visit pages. We will simply pull the unit, create an instance of it and start operating with the UI. No headless browser involved. We will use Node.js. Our <code>registerForm</code> is now a simple JavaScript function. So it should be possible to execute it in node.</li>
</ul>

<p>Not all of them, but most of the popular client-side frameworks nowadays use the DOM. That&#39;s a problem because in Node.js we do not have a DOM tree. Thankfully there is a module that brings a very good simulation of it. It&#39;s called <a href="https://www.npmjs.org/package/jsdom">jsdom</a>. Let&#39;s create a <em>package.json</em> and put the module there:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span><span class="p">,</span>
  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.0.0&quot;</span><span class="p">,</span>
  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
    <span class="s2">&quot;mocha&quot;</span><span class="o">:</span> <span class="s2">&quot;2.0.1&quot;</span><span class="p">,</span>
    <span class="s2">&quot;jsdom&quot;</span><span class="o">:</span> <span class="s2">&quot;1.1.0&quot;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Along with jsdom we added <a href="http://mochajs.org">Mocha</a> - a popular JavaScript test framework available for Node.js and the browser. We hit <code>npm install</code> and we are ready to write our test. The basic skeleton of our spec file is:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;assert&#39;</span><span class="p">);</span>

<span class="nx">suite</span><span class="p">(</span><span class="s1">&#39;Register form&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;validations&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span><span class="p">(</span><span class="mi">5000</span><span class="p">);</span>
      <span class="p">...</span>
      <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div>
<p><code>assert</code> is a Node.js native module specifically made for unit testing. <code>suite</code> and <code>test</code> are here because we are going to use the <code>tdd</code> interface of Mocha. If our test succeed we should call the <code>done</code> method. We increase the maximum timeout to five seconds so we give a chance to AngularJS doing its job.</p>

<p>The main challenge writing the test is to create a proper environment for AngularJS. So it functions like it is in the browser. Here is how to do this using <code>jsdom</code>:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;jsdom&quot;</span><span class="p">);</span>
<span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
  <span class="nx">html</span><span class="o">:</span> <span class="s1">&#39;&lt;html ng-app=&quot;app&quot;&gt;&lt;body&gt;&lt;div ng-controller=&quot;Controller&quot;&gt;&lt;register-form&gt;&lt;/register-form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">,</span>
  <span class="nx">scripts</span><span class="o">:</span> <span class="p">[</span>
    <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/../vendor/angular.min.js&#39;</span><span class="p">,</span>
    <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/../js/register-form.js&#39;</span>
  <span class="p">],</span>
  <span class="nx">features</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">FetchExternalResources</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;script&quot;</span><span class="p">],</span>
    <span class="nx">ProcessExternalResources</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;script&quot;</span><span class="p">],</span>
  <span class="p">},</span>
  <span class="nx">done</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">errors</span><span class="p">,</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">...</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<p>We <code>require</code> the module and call the <code>env</code> method that effectively creates a virtual page. The markup of that page is defined in the <code>html</code> property. The code there is valid for bootstrapping AngularJS application and <em>showing</em> our register form. Of course we need including AngularJS and <code>register-form.js</code> files which is done in the <code>scripts</code> property. At the end we are telling to <code>jsdom</code> that we want our script tags to be fetched and processed. The <code>done</code> property accepts callback which is the entry point of our test.</p>

<p>As we can see from the example above we have an access to a <code>window</code> object. That is the same global <code>window</code> object that we have in the browser. In fact <code>jsdom</code> is a JavaScript implementation of the WHATWG DOM and HTML standards. So there are tons of stuff that we can do from here. We can select elements from the generated DOM by using <code>window.document.querySelector</code> or trigger events. That&#39;s all we need to test the functionality in our directive. </p>

<p>We may start by defining a few helper functions that will make our life easier:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">selector</span><span class="p">);</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">trigger</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">createEvent</span><span class="p">(</span><span class="s1">&#39;UIEvents&#39;</span><span class="p">);</span>
  <span class="nx">e</span><span class="p">.</span><span class="nx">initEvent</span><span class="p">(</span><span class="nx">ev</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
  <span class="nx">el</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>Then add the basic AngularJS code that will show our directive on the <em>screen</em>:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nb">window</span>
  <span class="p">.</span><span class="nx">angular</span>
  <span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[])</span>
  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;Controller&#39;</span><span class="p">,</span> <span class="nx">Controller</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;registerForm&#39;</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">registerFormDirective</span><span class="p">);</span>
</code></pre></div>
<p>And of course the body of the controller that performs the actual testing:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Controller</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">runTests</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">register</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#register-button&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#username&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">password</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#password&#39;</span><span class="p">);</span>

    <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;Missing username.&#39;</span><span class="p">);</span>

    <span class="nx">username</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="p">;</span>
    <span class="nx">trigger</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="s1">&#39;change&#39;</span><span class="p">);</span>
    <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;Missing password.&#39;</span><span class="p">);</span>

    <span class="nx">password</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="p">;</span>
    <span class="nx">trigger</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="s1">&#39;change&#39;</span><span class="p">);</span>
    <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;Too short username.&#39;</span><span class="p">);</span>

    <span class="nx">username</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;testtesttesttest&#39;</span><span class="p">;</span>
    <span class="nx">trigger</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="s1">&#39;change&#39;</span><span class="p">);</span>
    <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;Too short password.&#39;</span><span class="p">);</span>

    <span class="nx">password</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;testtesttesttest&#39;</span><span class="p">;</span>
    <span class="nx">trigger</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="s1">&#39;change&#39;</span><span class="p">);</span>
    <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
    <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>

    <span class="nx">done</span><span class="p">();</span>

  <span class="p">};</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">runTests</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>Because there is some processing we need that little hack with the <code>setTimeout</code> call. We just make sure that the DOM and AngularJS bindings are fully initialized before selecting elements.</p>

<p>Another interesting rule that we have to follow is triggering <code>change</code> event every time when we type something into the text boxes. That&#39;s because otherwise AngularJS does not have an idea that we changed the value. This is still valid if we have logic attached to <em>blur</em>, <em>focus</em> or <em>click</em> events.</p>

<h3>A quick note</h3>

<p>Not to be pedantic but we have to mention that the test written above is more like functional test and not unit test. The truth is that the unit test operates only on one particular method of a class and it is indeed testing only one specific functionality. By testing the register form directive we are doing more then that. </p>

<h2>Final words</h2>

<p>Writing of tests is not always easy. However, it should be there and it should be automatic. Sometimes using tools like Selenium does not make possible testing the atoms of our system. Sometimes it is difficult to setup such tools or integrate them. <code>jsdom</code> is one of the nice workarounds and it definitely works for <a href="http://trialreach.com/">us</a>.</p>

<h4>Just the whole test</h4>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">assert</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;assert&#39;</span><span class="p">);</span>

<span class="nx">suite</span><span class="p">(</span><span class="s1">&#39;Register form&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

  <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;validations&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">timeout</span><span class="p">(</span><span class="mi">5000</span><span class="p">);</span>

    <span class="kd">var</span> <span class="nx">jsdom</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;jsdom&quot;</span><span class="p">);</span>
    <span class="nx">jsdom</span><span class="p">.</span><span class="nx">env</span><span class="p">({</span>
      <span class="nx">html</span><span class="o">:</span> <span class="s1">&#39;&lt;html ng-app=&quot;app&quot;&gt;&lt;body&gt;&lt;div ng-controller=&quot;Controller&quot;&gt;&lt;register-form&gt;&lt;/register-form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">,</span>
      <span class="nx">scripts</span><span class="o">:</span> <span class="p">[</span>
        <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/../vendor/angular.min.js&#39;</span><span class="p">,</span>
        <span class="nx">__dirname</span> <span class="o">+</span> <span class="s1">&#39;/../js/register-form.js&#39;</span>
      <span class="p">],</span>
      <span class="nx">features</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">FetchExternalResources</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;script&quot;</span><span class="p">],</span>
        <span class="nx">ProcessExternalResources</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;script&quot;</span><span class="p">],</span>
      <span class="p">},</span>
      <span class="nx">done</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">errors</span><span class="p">,</span> <span class="nb">window</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">errors</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Errors&#39;</span><span class="p">,</span> <span class="nx">errors</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">selector</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="nx">selector</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="kd">var</span> <span class="nx">trigger</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">ev</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">e</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">createEvent</span><span class="p">(</span><span class="s1">&#39;UIEvents&#39;</span><span class="p">);</span>
          <span class="nx">e</span><span class="p">.</span><span class="nx">initEvent</span><span class="p">(</span><span class="nx">ev</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
          <span class="nx">el</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="kd">var</span> <span class="nx">Controller</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">var</span> <span class="nx">runTests</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

            <span class="kd">var</span> <span class="nx">register</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#register-button&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#message&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#username&#39;</span><span class="p">);</span>
            <span class="kd">var</span> <span class="nx">password</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#password&#39;</span><span class="p">);</span>

            <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
            <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;Missing username.&#39;</span><span class="p">);</span>

            <span class="nx">username</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="p">;</span>
            <span class="nx">trigger</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="s1">&#39;change&#39;</span><span class="p">);</span>
            <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
            <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;Missing password.&#39;</span><span class="p">);</span>

            <span class="nx">password</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;test&#39;</span><span class="p">;</span>
            <span class="nx">trigger</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="s1">&#39;change&#39;</span><span class="p">);</span>
            <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
            <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;Too short username.&#39;</span><span class="p">);</span>

            <span class="nx">username</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;testtesttesttest&#39;</span><span class="p">;</span>
            <span class="nx">trigger</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="s1">&#39;change&#39;</span><span class="p">);</span>
            <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
            <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;Too short password.&#39;</span><span class="p">);</span>

            <span class="nx">password</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="s1">&#39;testtesttesttest&#39;</span><span class="p">;</span>
            <span class="nx">trigger</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="s1">&#39;change&#39;</span><span class="p">);</span>
            <span class="nx">register</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
            <span class="nx">assert</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>

            <span class="nx">done</span><span class="p">();</span>

          <span class="p">};</span>
          <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">runTests</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="nb">window</span>
          <span class="p">.</span><span class="nx">angular</span>
          <span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="p">[])</span>
          <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;Controller&#39;</span><span class="p">,</span> <span class="nx">Controller</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;registerForm&#39;</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">registerFormDirective</span><span class="p">);</span>

      <span class="p">}</span>
    <span class="p">});</span>

  <span class="p">});</span>

<span class="p">});</span>
</code></pre></div>
<p>This article was originally published at <a href="http://krasimirtsonev.com/blog/article/unit-test-your-client-side-javascript-jsdom-nodejs">krasimirtsonev.com</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>How to fix Shellshock on Ubuntu</title>
   <link href="http://blog.webbox.io/2014/10/03/how-to-fix-shellshock-on-ubuntu/"/>
   <updated>2014-10-03T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/10/03/how-to-fix-shellshock-on-ubuntu</id>
   <content type="html"><![CDATA[<p>Every single day, we are facing some kind of back-door or vulnerability on
servers, apps, systems, os&#39;es etc.</p>

<p>Few days ago, internet world shaked via <a href="http://en.wikipedia.org/wiki/Shellshock_(software_bug)">Shellshock</a> on <a href="http://www.gnu.org/software/bash/">Unix Bash Shell</a>.
It’s funny that, Unix is the most trusted operating system, also Bash was a
rock solid shell :) Yes, It was ...</p>

<p>If you have <em>**nix</em>* kind of operating system, you can test your Bash if it is
safe or not:</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">env <span class="nv">x</span><span class="o">=</span><span class="s1">&#39;() { :;}; echo vulnerable&#39;</span> bash -c <span class="s2">&quot;echo this is a test&quot;</span>
</code></pre></div>
<p>If you see <strong>vulnerable</strong> text, this means that you need to upgrade your Bash!
If not, you’re good to go :)</p>

<p>We use <a href="http://www.ubuntu.com/">Ubuntu</a> OS on our production servers. That’s why I’ll talk about
how to fix it :)</p>

<p>Login your system and check the code name of your OS. One of our server is
running on <strong>Ubuntu 13.04 (GNU/Linux 3.8.0-35-generic x86_64)</strong></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">lsb_release -a
</code></pre></div>
<p>You’ll see something like this:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 13.04
Release:        13.04
Codename:       raring
</code></pre></div>
<p>Our codename is <code>raring</code>. Now, do ;</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo sed -i &#39;s/raring/trusty/g&#39; /etc/apt/sources.list
</code></pre></div>
<p>If yours codename is different, change <code>raring</code> to yours please. After that
you need to <code>sudo aptitude update</code> to update your sources for package
installation. Then;</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">sudo apt-get install --only-upgrade bash
</code></pre></div>
<p>When It’s done, re-test your system via;</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">env <span class="nv">x</span><span class="o">=</span><span class="s1">&#39;() { :;}; echo vulnerable&#39;</span> bash -c <span class="s2">&quot;echo this is a test&quot;</span>
</code></pre></div>
<p>If you only see <code>this is a test</code> It means you&#39;ve patched your Bash correctly!
There are few sites that checks online but you need to do this by your hands
for your own good :)</p>

<p>Let’s see what will happen in the future :)</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rack Protection tips</title>
   <link href="http://blog.webbox.io/2014/07/31/rack-protection-tips/"/>
   <updated>2014-07-31T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/07/31/rack-protection-tips</id>
   <content type="html"><![CDATA[<p>I was playing with <a href="https://github.com/janko-m/sinatra-activerecord">sinatra-activerecord</a> gem for <a href="http://sinatrarb.com">Sinatra</a> the other day.
Building a basic <strong>CRUD</strong> application for test purposes. Sinatra comes with
<a href="https://github.com/rkh/rack-protection">rack-protection</a> gem.</p>

<p>While I was doing some form post operations, I recognized that, if I post
something like:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;script&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>
</code></pre></div>
<p>in the form input, the code I wrote worked and executed :) I was very surprised
since I thought that <strong>rack-protection</strong> is taking care of <strong>escaping</strong> inputs!</p>

<p>I figured it out that, I need to make some changes in my <code>config.ru</code> file.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&quot;sinatra/base&quot;</span>
<span class="nb">require</span> <span class="s2">&quot;rack/protection&quot;</span>

<span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span> <span class="s1">&#39;../application.rb&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span>

<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Protection</span><span class="o">::</span><span class="no">EscapedParams</span> <span class="c1"># This makes the magic</span>
<span class="n">run</span> <span class="no">MyApplication</span>
</code></pre></div>
<p>This worked like a charm. I started to dig what other protection features do I
have?</p>

<h3>Cross Site Request Forgery</h3>

<ul>
<li>Rack::Protection::AuthenticityToken</li>
<li>Rack::Protection::FormToken</li>
<li>Rack::Protection::JsonCsrf</li>
<li>Rack::Protection::RemoteReferrer</li>
<li>Rack::Protection::RemoteToken</li>
<li>Rack::Protection::HttpOrigin</li>
</ul>

<h3>Cross Site Scripting</h3>

<ul>
<li>Rack::Protection::EscapedParams</li>
<li>Rack::Protection::XSSHeader</li>
</ul>

<h3>Clickjacking</h3>

<ul>
<li>Rack::Protection::FrameOptions</li>
</ul>

<h3>Directory Traversal</h3>

<ul>
<li>Rack::Protection::PathTraversal</li>
</ul>

<h3>Session Hijacking</h3>

<ul>
<li>Rack::Protection::SessionHijacking</li>
</ul>

<h3>IP Spoofing</h3>

<ul>
<li>Rack::Protection::IPSpoofing</li>
</ul>

<p>I did many web application with <a href="https://www.djangoproject.com/">Django</a> last few years. Django was built-in
coming with <strong>CRSF</strong> protection on web forms. I&#39;d like to add <strong>CRSF</strong>
protection to my sample Sinatra application with Rack’s feature!</p>

<p>First, I added few lines to my <code>config.ru</code> file again;</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s2">&quot;sinatra/base&quot;</span>
<span class="nb">require</span> <span class="s2">&quot;rack/protection&quot;</span>

<span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span> <span class="s1">&#39;../application.rb&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span>

<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Session</span><span class="o">::</span><span class="no">Cookie</span><span class="p">,</span> <span class="ss">:secret</span> <span class="o">=&gt;</span> <span class="s2">&quot;!x#foo&quot;</span>  <span class="c1"># This must be set!</span>
<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Protection</span><span class="o">::</span><span class="no">FormToken</span>                 <span class="c1"># CRSF enabler</span>
<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Protection</span><span class="o">::</span><span class="no">EscapedParams</span>
<span class="n">run</span> <span class="no">MyApplication</span>
</code></pre></div>
<p>Then, I need to inject <strong>crsf token</strong> in to my html form! Just added this
hidden input field:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;hidden&quot;</span> <span class="na">name=</span><span class="s">&quot;authenticity_token&quot;</span> <span class="na">value=</span><span class="s">&quot;&lt;%= session[:csrf] %&gt;&quot;</span><span class="nt">&gt;</span>
</code></pre></div>
<p>That was it! If you <code>curl</code> and check the <strong>http-headers</strong>, you’ll see:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">HTTP/1.1 200 OK
Content-Type: text/html;charset=utf-8
Content-Length: 2574
X-XSS-Protection: 1; mode=block
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
Set-Cookie: rack.session=BAh7B0kiD3Nlc3Npb25faWQGOgZFVEkiRTZmMTA5MTZkNzk3M2I1YmY3NWEy%0AZGIwYmM0MmQyNTA0YTQ0YmRjNDNhNWU3YjNjNTNlY2Q3NTIyNzgyMTI5OTMG%0AOwBGSSIJY3NyZgY7AEZJIiVjODQ5NTVhOTQ1Y2YzNjg1OTIzMTgyZmVkYWZm%0AYzQ4YgY7AEY%3D%0A--c4ffd2647d6bfdf7fa6b7dfb28357eb0936f7e55; path=/; HttpOnly
Connection: keep-alive
Server: thin 1.6.2 codename Doc Brown
</code></pre></div>
<p>There were only two form elements in my html-form and fields were <code>post[title]</code>
and <code>post[description]</code>. I tested via;</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">curl -d &quot;post[title]=foo&amp;post[description]=moo&quot; http://127.0.0.1:9393/post/edit/18/
</code></pre></div>
<p>and it returned : <strong>Forbidden</strong></p>

<p><strong>Rack</strong> and it’s middlewares are super awesome! You can check our sample
application here on <a href="https://github.com/webBoxio/sinatra-activerecord-example">GitHub</a>.</p>

<p>As <a href="https://twitter.com/avdi">Avdi Grimm</a> said: <strong>Happy Hacking</strong></p>
]]></content>
 </entry>
 
 <entry>
   <title>Feeding the beast at 60fps</title>
   <link href="http://blog.webbox.io/2014/07/27/feeding-the-beast/"/>
   <updated>2014-07-27T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/07/27/feeding-the-beast</id>
   <content type="html"><![CDATA[<p>The browsers nowadays are smart. They optimize everything and help us to produce better applications. They process our code as fast as possible and even on mobile devices deliver a pleasant experience. However, at the same time, it is possible to write buggy code and make the browser freezing. We are not talking about slowing down the rendering. We are talking about no rendering at all. There are cases where we want so much from the browser that it just can&#39;t handle it.</p>

<h2>Processing hundreds of DOM elements</h2>

<p>I am working on an <a href="https://github.com/krasimir/modulize">extension</a> of Chrome that analyzes the CSS applied to the current page. I need to know every single CSS class used in the HTML tags. So, I have to go through the whole tree and get data from every element. I know, it sounds insane but I need to do it. There is no short way or tricky hack that I can apply. I just need to read every single tag and its attributes in order to implement my ideas. I started with the following code:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">processed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">(</span><span class="kd">function</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">==</span> <span class="s1">&#39;SCRIPT&#39;</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="nx">processed</span><span class="o">++</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39; (&#39;</span> <span class="o">+</span> <span class="nx">processed</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">);</span>
    <span class="c1">// using e.getAttributes ...</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">})(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">));</span>
</code></pre></div>
<p>We have a simple recursion. The root element is the <code>&lt;body&gt;</code> tag. We call the <code>parse</code> function again and again till there is no more child nodes available. We are also skipping the <code>script</code> tags because we are not interested in their content. Let&#39;s get the following markup and run the script:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Title<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;ul&gt;</span>
        <span class="nt">&lt;li&gt;</span>A<span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;li&gt;</span>B<span class="nt">&lt;/li&gt;</span>
        <span class="nt">&lt;li&gt;</span>C<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p&gt;</span>Lorem ipsum dolor ...<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>The result in the console is:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">body</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nx">div</span> <span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="nx">h1</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="nx">ul</span> <span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="nx">li</span> <span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="nx">li</span> <span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="nx">li</span> <span class="p">(</span><span class="mi">7</span><span class="p">)</span>
<span class="nx">div</span> <span class="p">(</span><span class="mi">8</span><span class="p">)</span>
<span class="nx">p</span> <span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</code></pre></div>
<p>Hey, it looks like it is working. I used this code for awhile and based all my logic on it. Everything was ok till I decided to test with real web site. I opened Facebook and run my extension. Yes, my browser was not responding for roughly 10 seconds. It was obvious that there are more than 9 DOM nodes on the page, and my code was <em>kind of</em> wrong. </p>

<p>I did not think about optimization algorithms or tricky hacks. I started thinking about the processes happening in the browser and the real reason behind that freeze. I knew that the browser is trying to render data to the screen in 60 frames per second. So, we have ~16.6 milliseconds per frame. That is the time that the browser has to finish its job and render something on the screen. So, what I was doing is forcing the browser to calculate everything into a single frame. That is crazy, and the result is logical.</p>

<p><img src="/assets/post_images/feedingthebeast/frames.jpg" alt="Feeding the beast at 60fps"></p>

<p>In order to fix that we have to give more time and distribute our recursive calls into different frames. In general, there are two ways to achieve this. The first one uses <code>setTimeout(fn, 0)</code>:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">processed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">(</span><span class="kd">function</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">==</span> <span class="s1">&#39;SCRIPT&#39;</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="nx">processed</span><span class="o">++</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39; (&#39;</span> <span class="o">+</span> <span class="nx">processed</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">);</span>
    <span class="c1">// using e.getAttributes ...</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="nx">index</span><span class="p">]);</span>
            <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
        <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">})(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">));</span>
</code></pre></div>
<p>We again have a <code>parse</code> function, but every child is sent for parsing through a <code>setTimeout</code> call.</p>

<p>The other way of solving the problem is by using <code>requestAnimationFrame</code>. It is supported by the most browsers  today but if you need to place your code into IE9 and below you may need a polyfill. </p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">processed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">(</span><span class="kd">function</span> <span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeType</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">==</span> <span class="s1">&#39;SCRIPT&#39;</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="nx">processed</span><span class="o">++</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39; (&#39;</span> <span class="o">+</span> <span class="nx">processed</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">);</span>
    <span class="c1">// using e.getAttributes ...</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">requestAnimationFrame</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">[</span><span class="nx">index</span><span class="p">]);</span>
            <span class="p">});</span>
        <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">})(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">));</span>
</code></pre></div>
<p>By using this technique, we give enough time to the browser to handle our code. It also gives us the ability to add a preloader of the process. Because we are executing logic asynchronously, we know where exactly we are and what we do.</p>

<p>Problem solved. Tons of DOM elements processed without freezing the browser. Let&#39;s see the next example. What happen when we have to process big chunks of data.</p>

<h2>Dealing with big data</h2>

<p>We worked on a project that is three years old. One of the pages has an instant name filter. The client visits the page, and there is an input field. Once he starts typing the application shows only those records that match the entered string. Over the years, the client uses this feature, and now he complains that it is too slow. </p>

<p>We started investigating and we found that the page was loading roughly 7MBs of JSON data. That is a lot actually. There was no API for that kind of filtering in the backend. We did not have access to the script that generates the JSON either. So, we have to solve the problem in the client side. Here is the code that we had in the beginning:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">loadData</span><span class="p">(</span><span class="s1">&#39;/api/data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">numOfUsers</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">printUsers</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">filter</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">filter</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">);</span>
        <span class="nx">list</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">numOfUsers</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span><span class="p">))</span> <span class="p">{</span>
                <span class="nx">list</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;. &#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">field</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;keyup&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">printUsers</span><span class="p">(</span><span class="nx">field</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="nx">printUsers</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div>
<p><code>list</code> and <code>field</code> are DOM elements. The <code>data</code> variable is an array with all the 5000+ records coming from the database. <code>printUsers</code> is the function that we call on every new character typed in the input field.</p>

<p>The performance of this page was terrible. It takes 10 seconds and more for the initial rendering and even more if we start typing. However, there was something interesting. It was really slow only when the browser has to show many elements. It became faster and faster if there were fewer records for displaying. It is also interesting that we loop through all the items of the <code>data</code> array every time. It is not like having fewer data for processing. Then I decided to comment the line that changes the <code>innerHTML</code> property of the <code>list</code> object. The result is amazing. The same page was rendered in just ~120ms and the typing in the field did not freeze the browser. </p>

<p><img src="/assets/post_images/feedingthebeast/dom.jpg" alt="Feeding the beast at 60fps"></p>

<p>Then I realized what the real problem was. It was not in the fact that we loaded many data. The browser was like a beast that eats everything. It parsed 7MBs of JSON fast and was able to iterate through every single record in just a few milliseconds. The problem was in the code that changes the DOM tree hundred of times per second. Every time when we apply a new value to <code>innerHTML</code> property the browser has to recalculate the position of the elements. Moreover, again, we wanted everything into a single frame.</p>

<p>So, the solution was to construct the needed html and apply it once after the big loop ends. For example:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">printUsers</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">filter</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">filter</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;i&#39;</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">numOfUsers</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span><span class="p">))</span> <span class="p">{</span>
            <span class="nx">html</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;. &#39;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">list</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2>Smart animations</h2>

<p>In the last section of this article, I want to share a small trick that I learned before a couple of months. We had a long list of links. Every link was nicely placed inside a <code>&lt;li&gt;</code> tag. We had to animate the items once the user mouse over them. Again, we have just a few records in the beginning, and we used the following CSS:</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">li</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">18px</span><span class="p">;</span>
    <span class="o">...</span>
    <span class="n">transition</span><span class="o">:</span> <span class="n">all</span> <span class="m">200</span><span class="n">ms</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">li</span><span class="nd">:hover</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">30px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>We were pleased with the result. It worked smooth. However, we started getting more and more items in the list and very soon it became glitchy. In fact, it was normal that we got such performance issues. We changed the geometry of the DOM elements, so they had to be onto different position. It required more calculation from the browser.</p>

<p>We all know about <code>translatez(0)</code> trick. It should boost our animations, right? It triggers GPU acceleration, and our element is rendered in its own layer. This is all great, but it comes at its own price. It could drain the battery of every mobile device pretty fast. It should be used wisely.</p>

<p><img src="/assets/post_images/feedingthebeast/animation.jpg" alt="Feeding the beast at 60fps"></p>

<p>The trick in our case was to animate the correct properties. I strongly recommend checking <a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/">&quot;High Performance Animations&quot;</a> article. It tells us which properties are cheap for animating. So, all we had to do is to replicate the <code>font-size</code> animation:</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">li</span><span class="nd">:hover</span> <span class="p">{</span>
    <span class="n">transform</span><span class="o">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">1</span><span class="o">.</span><span class="m">2</span><span class="o">,</span> <span class="m">1</span><span class="o">.</span><span class="m">2</span><span class="p">)</span> <span class="n">translate</span><span class="p">(</span><span class="m">27px</span><span class="o">,</span> <span class="m">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>The scaling and a short translating by the X axis did the job. We had the same visual appearance but better performance.</p>

<h2>Summary</h2>

<p>Believe it or not, I spent more time trying to crash my browser than writing this article. The examples in this article are inspired by real applications. The bad code that we had in the beginning produces slow applications, but they were still functional. The browsers nowadays are smart, effective and are trying to optimize whatever they can. All we have to do is to understand how they work and help them do their job.</p>

<p>This article was originally published at <a href="http://krasimirtsonev.com/blog/article/Feeding-the-beast-at-60fps-performance-matters">krasimirtsonev.com</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Ruby code security</title>
   <link href="http://blog.webbox.io/2014/07/18/ruby-code-security/"/>
   <updated>2014-07-18T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/07/18/ruby-code-security</id>
   <content type="html"><![CDATA[<p>I started writing a <a href="https://www.gitbook.io/book/vigo/ruby-101/">Ruby 101</a> book in Turkish. This will be a kind of
pocket guide, covering most of the basic stuff especially for me :) It’s like a notebook to assist you in your
daily Ruby usage.</p>

<p>While I was writing about <code>global_variables</code>, (<em>That was a quite refreshing
memory for me</em>) I remembered a lovely global variable which is called
<code>$SAFE</code></p>

<h2>What is <code>$SAFE</code></h2>

<p>Well, as far as you can understand, this is a flag that Ruby will
evaluate the upcoming code against the required security level.</p>

<p>Normal, all the Ruby code / scripts work at <strong>level 0</strong>. This means, by default:</p>

<p><code>$SAFE = 0</code></p>

<p>What happens if you set the value to 1 ? Right now, you have something called
<code>tainted</code> data. I remember the song called <strong>Tainted Love</strong> by <a href="http://www.youtube.com/watch?v=ZeJkbqjQvnk">Soft Cell</a>
8) If you are old enough to remember them!</p>

<p>After security level set, Ruby keeps track of changed or tainted data on lot
of things. Such as <code>Array</code>, <code>String</code>, <code>Hash</code> etc...</p>

<p>When the security level is set to 1;</p>

<ul>
<li><code>RUBYLIB</code> and <code>RUBYOPT</code> env-variables are not processed and current
directory is not added to path.</li>
<li>Command line options such as <code>-e, -i, -I, -r, -s, -S, -x</code> are not allowed.</li>
<li>System commands or <code>exec</code> can won&#39;t work from a <strong>tainted string</strong></li>
<li>Can not processes from <code>$PATH</code></li>
<li><code>chroot</code> for directory won’t work (<em>if the dirname is tainted string</em>)</li>
<li>Not possible to <code>glob</code> or <code>eval</code> tainted strings.</li>
<li><code>require</code> won’t work if a filename is tainted string.</li>
</ul>

<h2>What is Tainted String ?</h2>

<p>User inputs are <strong>tainted</strong> by default.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">input</span> <span class="o">=</span> <span class="nb">gets</span>      <span class="c1"># get input from user</span>
<span class="n">input</span><span class="o">.</span><span class="n">tainted?</span>    <span class="c1"># true</span>
</code></pre></div>
<p>can we fix this? YES!</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">input</span> <span class="o">=</span> <span class="nb">gets</span>      <span class="c1"># get input from user</span>
<span class="n">input</span><span class="o">.</span><span class="n">tainted?</span>    <span class="c1"># true</span>
<span class="n">input</span><span class="o">.</span><span class="n">untaint</span>     <span class="c1"># make it pure again :)</span>
<span class="n">input</span><span class="o">.</span><span class="n">tainted?</span>    <span class="c1"># false</span>
</code></pre></div>
<p><code>untaint</code> works because we did not set the <strong>security level</strong>. Let’s try
 <strong>level 3</strong>. Save this file as <code>test_tainted.rb</code> and execute via;
<code>ruby test_tainted.rb</code></p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#!/usr/bin/env ruby</span>
<span class="vg">$SAFE</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">puts</span> <span class="s2">&quot;Enter a text&quot;</span>
<span class="n">input</span> <span class="o">=</span> <span class="nb">gets</span>
<span class="nb">puts</span> <span class="s2">&quot;Tainted Love? </span><span class="si">#{</span><span class="n">input</span><span class="o">.</span><span class="n">tainted?</span><span class="si">}</span><span class="s2">&quot;</span>

<span class="n">input</span><span class="o">.</span><span class="n">untaint</span>
<span class="nb">puts</span> <span class="s2">&quot;Is untain worked? Still tainted? </span><span class="si">#{</span><span class="n">input</span><span class="o">.</span><span class="n">tainted?</span><span class="si">}</span><span class="s2">&quot;</span>
</code></pre></div>
<p>Booom!</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">tainted.rb:8:in `untaint&#39;: Insecure operation `untaint&#39; at level 3 (SecurityError)
</code></pre></div>
<h2>Let’s modify a String object</h2>

<p>For me the most beautiful part of Ruby is that you can manipulate anything even the Standard Libraries. For example you
can add a custom method to <code>String</code>.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="s2">&quot;hello&quot;</span>  <span class="c1"># a standard string</span>

<span class="k">class</span> <span class="nc">String</span>
 <span class="k">def</span> <span class="nf">my_method</span>
   <span class="s2">&quot;Hello! This is my custom method&quot;</span>
 <span class="k">end</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">my_method</span>

<span class="vg">$SAFE</span> <span class="o">=</span> <span class="mi">4</span>      <span class="c1"># lets lock this thing!</span>
<span class="k">class</span> <span class="nc">String</span>
 <span class="k">def</span> <span class="nf">my_method</span>
   <span class="s2">&quot;I modified my custom method 8)&quot;</span>
 <span class="k">end</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">my_method</span>
</code></pre></div>
<p>output is:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">hello
Hello! This is my custom method

ArgumentError: $SAFE=4 is obsolete
</code></pre></div>
<p>Thats because you can not modify <code>String</code> on <strong>level 4</strong>.</p>

<h2>Internal and External Data</h2>

<p>If you set a value to a custom variable, this is an <strong>internal data</strong>.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;Hello&quot;</span>
<span class="nb">puts</span> <span class="n">s</span><span class="o">.</span><span class="n">tainted?</span>      <span class="c1"># false</span>

<span class="nb">puts</span> <span class="n">s</span> <span class="o">=~</span> <span class="sr">/(\w)/</span>
<span class="nb">puts</span> <span class="vg">$1</span>              <span class="c1"># H</span>
<span class="nb">puts</span> <span class="vg">$1</span><span class="o">.</span><span class="n">tainted?</span>     <span class="c1"># false</span>
</code></pre></div>
<p>Nothing is <strong>tainted</strong> because they are all <strong>internal</strong>. Let’s look at these
variables;</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;HOME&quot;</span><span class="o">].</span><span class="n">tainted?</span>            <span class="c1"># true</span>
<span class="nb">puts</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RBENV_VERSION&quot;</span><span class="o">].</span><span class="n">tainted?</span>   <span class="c1"># true</span>
<span class="nb">puts</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;SHELL&quot;</span><span class="o">].</span><span class="n">tainted?</span>           <span class="c1"># true</span>
</code></pre></div>
<p>They are all <strong>external</strong> and <strong>tainted</strong> :) You can not use <strong>dangerous methods</strong>
on tainted data! If you try to code above on <strong>level 3</strong>;</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vg">$SAFE</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">puts</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;HOME&quot;</span><span class="o">].</span><span class="n">tainted?</span>
<span class="nb">puts</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RBENV_VERSION&quot;</span><span class="o">].</span><span class="n">tainted?</span>
<span class="nb">puts</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;SHELL&quot;</span><span class="o">].</span><span class="n">tainted?</span>
</code></pre></div>
<p>You’ll get:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">SecurityError: Insecure operation - []
</code></pre></div>
<p>When google it about <code>$SAFE</code>, I found that:</p>

<blockquote>
<p>We use $SAFE = 4 to create a sandbox for the
execution of semi-trusted scripts, conforming
to our application&#39;s plug-in API.
&quot;Semi-trusted&quot; meaning of third-party origin,
but not intentionally malicious.</p>
</blockquote>

<p><a href="https://www.ruby-forum.com/topic/1887006#1004452">source</a></p>

<p>If you like to dig deep, please check <a href="http://phrogz.net/programmingruby/taint.html">this website</a> for more information.
If you set it to level 3, <strong>All objects are created tainted</strong> and you <strong>can’t
untaint</strong> any of them!</p>

<h2>Trust and Untrust</h2>

<p>There is a slightly diffence between <code>trust</code> and <code>taint</code>. <strong>Taint</strong> is related
to data, <strong>Trust</strong> is related to an access to a data. It’s like <code>taint</code> checks
if the data is ok? <code>trust</code> checks if the data is accessible.</p>

<p><a href="https://github.com/matz">Matz</a> mentioned this on a Ruby forum:</p>

<blockquote>
<p>Tainting is a mark for data from outside world.  Data from outside
cannot be trusted.  Untrusting is a mark for data from untrusted code
(that run under $SAFE level 4).</p>
</blockquote>

<p>One more important thing. You can’t set/change <code>$SAFE</code> if you set it earlier.
I mean, if you set <code>$SAFE</code> level to <strong>3</strong>  you can’t modify it later like to <strong>2</strong> or lesser.
. You can increment the <code>$SAFE</code> value but <strong>can’t decrement</strong>!</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vg">$SAFE</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>

<span class="vg">$SAFE</span> <span class="o">=</span> <span class="mi">2</span>
<span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">SecurityError: tried to downgrade safe level from 3 to 2
</code></pre></div>
<p>But this works:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vg">$SAFE</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>

<span class="vg">$SAFE</span> <span class="o">=</span> <span class="mi">2</span>
<span class="nb">puts</span> <span class="s2">&quot;Hello world&quot;</span>
</code></pre></div>
<p>This is a really interesting topic. Sad that it is not possible to find more detailed
information about it. I tried to cover as much as I can. Feel free to add
comments, resources, links to this post!</p>
]]></content>
 </entry>
 
 <entry>
   <title>A modern JavaScript router in 100 lines</title>
   <link href="http://blog.webbox.io/2014/07/15/A-modern-JavaScript-router-in-100-lines/"/>
   <updated>2014-07-15T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/07/15/A-modern-JavaScript-router-in-100-lines</id>
   <content type="html"><![CDATA[<p>Nowadays the popular single-page applications are everywhere. Having such application means that you need a solid routing mechanism. Frameworks like <a href="http://emberjs.com/">Emberjs</a> are truly built on top of a Router class. I am still not sure that this is a concept that I like, but I am sure that <a href="http://absurdjs.com/">AbsurdJS</a> should have a build-in Router. Moreover, as with everything in this little library, it should be small, simple class. Let&#39;s see how such a module may look like.</p>

<h2>Requirements</h2>

<p>The router should:</p>

<ul>
<li>be less than 100 lines</li>
<li>supports hash typed URLs like <i>http://site.com#products/list</i></li>
<li>work with the <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history">History API</a></li>
<li>provide easy-to-use API</li>
<li>not run automatically </li>
<li>listen for changes only if we want to</li>
</ul>

<h2>The Singleton</h2>

<p>I decided to have only one instance of the router. This may be a bad choice, because I had a project where I needed several routers, but this was an unusual application. If we implement the <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#singletonpatternjavascript">Singleton</a> pattern, we will not need to pass the router from object to object, and we do not have to worry about creating it.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">routes</span><span class="o">:</span> <span class="p">[],</span>
    <span class="nx">mode</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span>
<span class="p">}</span>
</code></pre></div>
<p>There are three properties which we need.</p>

<ul>
    <li>routes - it keeps the current registered routes</li>
    <li>mode - could be 'hash' or 'history' showing if we use the History API or not</li>
    <li>root - the root URL path of the application. It is needed only if we use <i>pushState</i>.</li>
</ul>

<h2>Configuration</h2>

<p>We need a method which will set up the router. We have only two things to pass, but it is good to do this within a function.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">routes</span><span class="o">:</span> <span class="p">[],</span>
    <span class="nx">mode</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
    <span class="nx">config</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">mode</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">mode</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">mode</span> <span class="o">==</span> <span class="s1">&#39;history&#39;</span> 
                    <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="p">(</span><span class="nx">history</span><span class="p">.</span><span class="nx">pushState</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;history&#39;</span> <span class="o">:</span> <span class="s1">&#39;hash&#39;</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">root</span> <span class="o">?</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">clearSlashes</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>The mode is equal to &#39;history&#39; only if we want to and, of course, only if the <i>pushState</i> is supported. Otherwise, we are going to work with the hash in the URL. The <i>root</i> by default is set to a single slash &#39;/&#39;.</p>

<h2>Getting the current URL</h2>

<p>This is an important part of our router, because it will tell us where we are at the moment. We have two modes so we need a <i>if</i> statement.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">getFragment</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">fragment</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mode</span> <span class="o">===</span> <span class="s1">&#39;history&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">fragment</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">clearSlashes</span><span class="p">(</span><span class="nb">decodeURI</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">));</span>
        <span class="nx">fragment</span> <span class="o">=</span> <span class="nx">fragment</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\?(.*)$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="nx">fragment</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="o">!=</span> <span class="s1">&#39;/&#39;</span> <span class="o">?</span> <span class="nx">fragment</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">:</span> <span class="nx">fragment</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/#(.*)$/</span><span class="p">);</span>
        <span class="nx">fragment</span> <span class="o">=</span> <span class="nx">match</span> <span class="o">?</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">clearSlashes</span><span class="p">(</span><span class="nx">fragment</span><span class="p">);</span>
<span class="p">}</span> 
</code></pre></div>
<p>In both cases we are using the global <i>window.location</i> object. In the &#39;history&#39; mode version we need to remove the <i>root</i> part of the URL. We should also delete all the GET parameters, and this is done with a regex (/\?(.*)$/). The getting of the hash value is a little bit easier. Notice the usage of the <i>clearSlashes</i> function. Its job is to remove the slashes from the beginning and at the end of the string. This is necessary, because we do not want to force the developer to use a specific format of the URLs. Whatever he passes it is translated to the same value.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">clearSlashes</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">path</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\/$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\//</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<h2>Adding and removing routes</h2>

<p>While I am working on <a href="http://absurdjs.com/">AbsurdJS</a> I am always trying to give as much control as possible to the developers. In almost every router implementation, the routes are defined as strings. However, I prefer to pass a regular expression . It is much more flexible, because we may do crazy matches.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">add</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">re</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">re</span> <span class="o">==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">handler</span> <span class="o">=</span> <span class="nx">re</span><span class="p">;</span>
        <span class="nx">re</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">re</span><span class="o">:</span> <span class="nx">re</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="nx">handler</span><span class="p">});</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>The function fills the <i>routes</i> array. If only a function is passed then it is considered as a handler of the default route which is just an empty string. Notice that most of the functions return <i>this</i>. This will help us to chain the methods of the class.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">param</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nx">r</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">handler</span> <span class="o">===</span> <span class="nx">param</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">re</span> <span class="o">===</span> <span class="nx">param</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> 
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>The deletion of a route could happen only if we pass a matching regularl expression, or the handler passed to <i>add</i> method.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">flush</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">routes</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">mode</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>Sometimes we may need to reinitialize the class. So the <i>flush</i> method above could be used in such cases.</p>

<h2>Check-in</h2>

<p>Ok, we have an API for adding and removing URLs. We are also able to get the current address. So, the next logical step is to compare the registered entries.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">check</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">fragment</span> <span class="o">=</span> <span class="nx">f</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">();</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">fragment</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">re</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">match</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">match</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">handler</span><span class="p">.</span><span class="nx">apply</span><span class="p">({},</span> <span class="nx">match</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">}</span>            
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>We are getting the fragment by using the <code>getFragment</code> method or accepting it as a parameter to the function. After that we perform a normal loop through the routes and try to find a match. There is a variable <i>match</i> which value is <i>null</i> if the regular expression doesn&#39;t match. Otherwise, its value is something like</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">[</span><span class="s2">&quot;products/12/edit/22&quot;</span><span class="p">,</span> <span class="s2">&quot;12&quot;</span><span class="p">,</span> <span class="s2">&quot;22&quot;</span><span class="p">,</span> <span class="nx">index</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">input</span><span class="o">:</span> <span class="s2">&quot;/products/12/edit/22&quot;</span><span class="p">]</span>
</code></pre></div>
<p>It is array-like object, which contains the matched string and all remembered substrings. This means that if we <i>shift</i> the first element we will get an array of the dynamic parts. For example:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">Router</span>
<span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="sr">/about/</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;about&#39;</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="sr">/products\/(.*)\/edit\/(.*)/</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;products&#39;</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="s1">&#39;/products/12/edit/22&#39;</span><span class="p">);</span>
</code></pre></div>
<p>This script outputs:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">products</span> <span class="p">[</span><span class="s2">&quot;12&quot;</span><span class="p">,</span> <span class="s2">&quot;22&quot;</span><span class="p">]</span>
</code></pre></div>
<p>That is how we could handle dynamic URLs.</p>

<h2>Monitoring for changes</h2>

<p>Of course we can&#39;t run the <i>check</i> method all the time. We need a logic that will notify us for changes in the address bar. Including a click on the <i>back</i> button of the browser. Those of you which play with the History API know that there is a <i>popstate</i> event. It is triggered when the URL is changed. However, I found that some browser dispatch this event on page load. This with some other differences makes me think of another solution. And because I wanted to have monitoring even if the mode is set to <i>hash</i> I decided to use <i>setInterval</i></p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">listen</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">())</span> <span class="p">{</span>
            <span class="nx">current</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">();</span>
            <span class="nx">self</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="nx">current</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">clearInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">interval</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>We need to keep the latest URL, so we are able to compare it to the new one.</p>

<h2>Changing the URL</h2>

<p>In the end, our router needs a function which changes the current address and of course fires the route&#39;s handler.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">navigate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">path</span> <span class="o">=</span> <span class="nx">path</span> <span class="o">?</span> <span class="nx">path</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mode</span> <span class="o">===</span> <span class="s1">&#39;history&#39;</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">history</span><span class="p">.</span><span class="nx">pushState</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">clearSlashes</span><span class="p">(</span><span class="nx">path</span><span class="p">));</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/#(.*)$/</span><span class="p">);</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/#(.*)$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">path</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>Again, we are doing different things depending on the <i>mode</i> property. If the History API is available we are using <i>pushState</i>. Otherwise the good old <i>window.location</i> is on the line.</p>

<h2>Final source code</h2>

<p>Here is the finished version of the router with a little example:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">routes</span><span class="o">:</span> <span class="p">[],</span>
    <span class="nx">mode</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
    <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
    <span class="nx">config</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">mode</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">mode</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">mode</span> <span class="o">==</span> <span class="s1">&#39;history&#39;</span> 
                    <span class="o">&amp;&amp;</span> <span class="o">!!</span><span class="p">(</span><span class="nx">history</span><span class="p">.</span><span class="nx">pushState</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;history&#39;</span> <span class="o">:</span> <span class="s1">&#39;hash&#39;</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">root</span> <span class="o">?</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">clearSlashes</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">root</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">:</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">getFragment</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">fragment</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mode</span> <span class="o">===</span> <span class="s1">&#39;history&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">fragment</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">clearSlashes</span><span class="p">(</span><span class="nb">decodeURI</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span> <span class="o">+</span> <span class="nx">location</span><span class="p">.</span><span class="nx">search</span><span class="p">));</span>
            <span class="nx">fragment</span> <span class="o">=</span> <span class="nx">fragment</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\?(.*)$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
            <span class="nx">fragment</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="o">!=</span> <span class="s1">&#39;/&#39;</span> <span class="o">?</span> <span class="nx">fragment</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">:</span> <span class="nx">fragment</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/#(.*)$/</span><span class="p">);</span>
            <span class="nx">fragment</span> <span class="o">=</span> <span class="nx">match</span> <span class="o">?</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">clearSlashes</span><span class="p">(</span><span class="nx">fragment</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="nx">clearSlashes</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">path</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\/$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\//</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="nx">add</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">re</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">re</span> <span class="o">==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">handler</span> <span class="o">=</span> <span class="nx">re</span><span class="p">;</span>
            <span class="nx">re</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="nx">re</span><span class="o">:</span> <span class="nx">re</span><span class="p">,</span> <span class="nx">handler</span><span class="o">:</span> <span class="nx">handler</span><span class="p">});</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">param</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="nx">r</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">handler</span> <span class="o">===</span> <span class="nx">param</span> <span class="o">||</span> <span class="nx">r</span><span class="p">.</span><span class="nx">re</span> <span class="o">===</span> <span class="nx">param</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> 
                <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">flush</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">routes</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">mode</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">check</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">fragment</span> <span class="o">=</span> <span class="nx">f</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">fragment</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">re</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">match</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">match</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">handler</span><span class="p">.</span><span class="nx">apply</span><span class="p">({},</span> <span class="nx">match</span><span class="p">);</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
            <span class="p">}</span>            
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">listen</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">();</span>
        <span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">current</span> <span class="o">!==</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">())</span> <span class="p">{</span>
                <span class="nx">current</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">getFragment</span><span class="p">();</span>
                <span class="nx">self</span><span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="nx">current</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nx">clearInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">interval</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">interval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">navigate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">path</span> <span class="o">=</span> <span class="nx">path</span> <span class="o">?</span> <span class="nx">path</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mode</span> <span class="o">===</span> <span class="s1">&#39;history&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">history</span><span class="p">.</span><span class="nx">pushState</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">root</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">clearSlashes</span><span class="p">(</span><span class="nx">path</span><span class="p">));</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/#(.*)$/</span><span class="p">);</span>
            <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/#(.*)$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">path</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// configuration</span>
<span class="nx">Router</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span> <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;history&#39;</span><span class="p">});</span>

<span class="c1">// returning the user to the initial state</span>
<span class="nx">Router</span><span class="p">.</span><span class="nx">navigate</span><span class="p">();</span>

<span class="c1">// adding routes</span>
<span class="nx">Router</span>
<span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="sr">/about/</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;about&#39;</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="sr">/products\/(.*)\/edit\/(.*)/</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;products&#39;</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="nx">check</span><span class="p">(</span><span class="s1">&#39;/products/12/edit/22&#39;</span><span class="p">).</span><span class="nx">listen</span><span class="p">();</span>

<span class="c1">// forwarding</span>
<span class="nx">Router</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span><span class="s1">&#39;/about&#39;</span><span class="p">);</span>
</code></pre></div>
<h2>Summary</h2>

<p>The router is around 90 lines. It supports hash typed URLs and the new History API. It could be helpful if you do not want to use the whole framework only because of the routing capabilities. </p>

<p>This class is part of <a href="http://absurdjs.com/">AbsurdJS</a> library. Checkout the documentation page of the class <a href="http://absurdjs.com/pages/api/build-in-components/#router">here</a>.</p>

<p>This article was originally published at <a href="http://krasimirtsonev.com/blog/article/A-modern-JavaScript-router-in-100-lines-history-api-pushState-hash-url">krasimirtsonev.com</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Dependency injection in JavaScript</title>
   <link href="http://blog.webbox.io/2014/07/08/dependency-injection/"/>
   <updated>2014-07-08T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/07/08/dependency-injection</id>
   <content type="html"><![CDATA[<p>I like the quote that the programming is all about managing complexity. Maybe you&#39;ve heard that the computer world is a giant construction of abstractions. We simply wrap things and produce new tools over and over again. Just think for a minute. The languages which you use have build-in functionalities and they are probably abstracted functions of other low level operations. It&#39;s the same with JavaScript.</p>

<p>Sooner or later you need to use abstractions made by other developers. I.e. you depend on someone&#39;s other code. I like the dependency-free modules, but that&#39;s kinda difficult to achieve. Even if you create those nice black-box liked components you still have a part which combines everything. That&#39;s where the dependency injection placed in. The ability to manage the dependencies effectively is absolutely necessary nowadays. This articles sums up my observations on the problem.</p>

<h2>The goal</h2>

<p>Let&#39;s say that we have two modules. The first one is a service which makes Ajax requests and the second one is a router.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">service</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Service&#39;</span> <span class="p">};</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Router&#39;</span> <span class="p">};</span>
<span class="p">}</span>
</code></pre></div>
<p>We have another function which needs these modules.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">other</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">service</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">router</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div>
<p>And to make the things a little bit more interesting the function needs to accept one more parameter. Sure, we could use the above code, but that&#39;s not really flexible. What if we want to use <code>ServiceXML</code> or <code>ServiceJSON</code>. Or what if we want to mockup some of the modules for testing purposes. We can&#39;t just edit the body of the function. The first thing which we all come up with is to pass the dependencies as parameters to the function. I.e.:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">,</span> <span class="nx">router</span><span class="p">,</span> <span class="nx">other</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">service</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">router</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div>
<p>By doing this we are passing the exact implementation of the module which we want. However this brings a new problem. Imagine if we have <code>doSomething</code> all over our code. What will happen if we need a third dependency. We can&#39;t edit all the function&#39;s calls. So, we need an instrument which will do that for us. That&#39;s what dependency injectors are trying to solve. Let&#39;s write down few goals which we want to achieve:</p>

<ul>
<li>we should be able to register dependencies</li>
<li>the injector should accept a function and should return a function which somehow gets the needed resources</li>
<li>we should not write a lot, we need short and nice syntax</li>
<li>the injector should keep the scope of the passed function</li>
<li>the passed function should be able to accept custom arguments, not only the described dependencies</li>
</ul>

<p>A nice list isn&#39;t it. Let&#39;s dive in.</p>

<h2>The <a href="http://requirejs.org/">requirejs</a> / <a href="http://requirejs.org/docs/whyamd.html">AMD</a> approach</h2>

<p>You probably already know about <a href="http://requirejs.org/">requirejs</a>. It&#39;s a nice variant for solving dependencies.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;service&#39;</span><span class="p">,</span> <span class="s1">&#39;router&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">,</span> <span class="nx">router</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre></div>
<p>The idea is firstly to describe the needed dependencies and then write your function. The order of the arguments is of course important here. Let&#39;s say that we will write a module called <code>injector</code> which will accept the same syntax.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">resolve</span><span class="p">([</span><span class="s1">&#39;service&#39;</span><span class="p">,</span> <span class="s1">&#39;router&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">,</span> <span class="nx">router</span><span class="p">,</span> <span class="nx">other</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">service</span><span class="p">().</span><span class="nx">name</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Service&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">router</span><span class="p">().</span><span class="nx">name</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Router&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">other</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Other&#39;</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">doSomething</span><span class="p">(</span><span class="s2">&quot;Other&quot;</span><span class="p">);</span>
</code></pre></div>
<p><i>Before to continue I should clarify the body of the <code>doSomething</code> function. I&#39;m using <a href="https://github.com/LearnBoost/expect.js">expect.js</a> as a assertion library just to be sure that the code which I&#39;m writing works as I want. A little bit TDD approach.</i></p>

<p>Here is what our <code>injector</code> module starts from. It&#39;s good to be a singleton, so it does its job from different parts of our application.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">injector</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">dependencies</span><span class="o">:</span> <span class="p">{},</span>
    <span class="nx">register</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">resolve</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">deps</span><span class="p">,</span> <span class="nx">func</span><span class="p">,</span> <span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>

    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Really simple object which has two functions and one variable which acts as a storage. What we have to do is to checks the <code>deps</code> array and search for answers in the <code>dependencies</code> variable. The rest is just calling the <code>.apply</code> method against the past <code>func</code> parameter.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">resolve</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">deps</span><span class="p">,</span> <span class="nx">func</span><span class="p">,</span> <span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">deps</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">d</span><span class="o">=</span><span class="nx">deps</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span> <span class="p">{</span>
            <span class="nx">args</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Can\&#39;t resolve &#39;</span> <span class="o">+</span> <span class="nx">d</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">scope</span> <span class="o">||</span> <span class="p">{},</span> <span class="nx">args</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">0</span><span class="p">)));</span>
    <span class="p">}</span>        
<span class="p">}</span>
</code></pre></div>
<p>If there is any scope it is effectively used. <code>Array.prototype.slice.call(arguments, 0)</code> is necessary to transform the <code>arguments</code> variable to an actually array. So far so good. Our test passes. The problem with this implementation is that we have to write the needed components twice and we can&#39;t really mix their order. The additional custom parameters are always after the dependencies.</p>

<h2>The reflection approach</h2>

<p>According to Wikipedia <em>reflection</em> is the ability of a program to examine and modify the structure and behaviour of an object at runtime. With simple words, in the context of JavaScript, that&#39;s reading the source code of an object or function and analyzing it. Let&#39;s get our <code>doSomething</code> function from the beginning. If you log <code>doSomething.toString()</code> you will get the following string:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="s2">&quot;function (service, router, other) {</span>
<span class="s2">    var s = service();</span>
<span class="s2">    var r = router();</span>
<span class="s2">}&quot;</span>
</code></pre></div>
<p>Having the method as a string gives us the ability to fetch the expected parameters. And, which is more important, their names. That&#39;s what <a href="http://angularjs.org/">Angular</a> uses for its dependency injection implementation. I cheated a bit and got the regular expression which exports the arguments directly from the Angular&#39;s code.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="sr">/^function\s*[^\(]*\(\s*([^\)]*)\)/m</span>
</code></pre></div>
<p>We could change the <code>resolve</code> class to the following:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">resolve</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">func</span><span class="p">,</span> <span class="nx">deps</span><span class="p">,</span> <span class="nx">scope</span><span class="p">,</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
    <span class="nx">func</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="nx">deps</span> <span class="o">=</span> <span class="nx">func</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^function\s*[^\(]*\(\s*([^\)]*)\)/m</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>
    <span class="nx">scope</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="p">{};</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">deps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">deps</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="nx">args</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">d</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span> <span class="o">?</span> <span class="nx">self</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span> <span class="o">:</span> <span class="nx">a</span><span class="p">.</span><span class="nx">shift</span><span class="p">());</span>
        <span class="p">}</span>
        <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">scope</span> <span class="o">||</span> <span class="p">{},</span> <span class="nx">args</span><span class="p">);</span>
    <span class="p">}</span>        
<span class="p">}</span>
</code></pre></div>
<p>We run the RegExp against the function&#39;s definition. The result is:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="p">[</span><span class="s2">&quot;function (service, router, other)&quot;</span><span class="p">,</span> <span class="s2">&quot;service, router, other&quot;</span><span class="p">]</span>
</code></pre></div>
<p>So, we need only the second item. Once we clean up the empty spaces and split the string we got the <code>deps</code> array filled. There is one more change:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">...</span>
<span class="nx">args</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">d</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span> <span class="o">?</span> <span class="nx">self</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span> <span class="o">:</span> <span class="nx">a</span><span class="p">.</span><span class="nx">shift</span><span class="p">());</span>
</code></pre></div>
<p>We are looping through the dependencies and if there is something missing we are trying to fetch it from the <code>arguments</code> object. Thankfully the <code>shift</code> method returns simply <code>undefined</code> if the array is empty. It&#39;s not throwing an error. The new version of the <code>injector</code> could be used like that:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">,</span> <span class="nx">other</span><span class="p">,</span> <span class="nx">router</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">service</span><span class="p">().</span><span class="nx">name</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Service&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">router</span><span class="p">().</span><span class="nx">name</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Router&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">other</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Other&#39;</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">doSomething</span><span class="p">(</span><span class="s2">&quot;Other&quot;</span><span class="p">);</span>
</code></pre></div>
<p>No double writing of the dependencies and we could mix their order. It still works and we replicated the Angular&#39;s magic.</p>

<p>However, the world is not perfect and there is one very big problem with that reflection type of injection. The minification will break our logic. That&#39;s because it changes the names of the parameters and we will not be able to resolve the dependencies. For example:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">doSomething</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">();</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">t</span><span class="p">()}</span>
</code></pre></div>
<p>That&#39;s our <code>doSomething</code> function passed to a compressor. The solution proposed by Angular&#39;s team looks like that:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">resolve</span><span class="p">([</span><span class="s1">&#39;service&#39;</span><span class="p">,</span> <span class="s1">&#39;router&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">service</span><span class="p">,</span> <span class="nx">router</span><span class="p">)</span> <span class="p">{</span>

<span class="p">}]);</span>
</code></pre></div>
<p>It looks like the thing which we started with. I personally wasn&#39;t able to find a better solution, and decided to mix the two approaches. Here is the final version of the injector.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">injector</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">dependencies</span><span class="o">:</span> <span class="p">{},</span>
    <span class="nx">register</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">resolve</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">func</span><span class="p">,</span> <span class="nx">deps</span><span class="p">,</span> <span class="nx">scope</span><span class="p">,</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[],</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">func</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
            <span class="nx">deps</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>
            <span class="nx">scope</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">||</span> <span class="p">{};</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">func</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="nx">deps</span> <span class="o">=</span> <span class="nx">func</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^function\s*[^\(]*\(\s*([^\)]*)\)/m</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span>
            <span class="nx">scope</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="p">{};</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">deps</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">deps</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
                <span class="nx">args</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">d</span> <span class="o">!=</span> <span class="s1">&#39;&#39;</span> <span class="o">?</span> <span class="nx">self</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span> <span class="o">:</span> <span class="nx">a</span><span class="p">.</span><span class="nx">shift</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">scope</span> <span class="o">||</span> <span class="p">{},</span> <span class="nx">args</span><span class="p">);</span>
        <span class="p">}</span>        
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>The <code>resolve</code> method accepts two or three parameters. If they are two it acts like we wrote it lately. However, if there are three arguments it gets the first one, parse it and fills the <code>deps</code> array. Here is the test case:</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;router,,service&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">a</span><span class="p">().</span><span class="nx">name</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Router&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Other&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">c</span><span class="p">().</span><span class="nx">name</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Service&#39;</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">doSomething</span><span class="p">(</span><span class="s2">&quot;Other&quot;</span><span class="p">);</span>
</code></pre></div>
<p>You will probably notice that there are two commas one after each other. That&#39;s not a typo. The empty value actually represents the <code>&quot;Other&quot;</code> parameter. That&#39;s how we will be able to control the order of the parameters.</p>

<h2>Injection directly into the scope</h2>

<p>Sometimes I&#39;m using a third variant of injection. It involves a manipulation of the function&#39;s scope (or with other words, the <code>this</code> object). So, it is not always appropriate.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">injector</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">dependencies</span><span class="o">:</span> <span class="p">{},</span>
    <span class="nx">register</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">resolve</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">deps</span><span class="p">,</span> <span class="nx">func</span><span class="p">,</span> <span class="nx">scope</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="nx">scope</span> <span class="o">=</span> <span class="nx">scope</span> <span class="o">||</span> <span class="p">{};</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">deps</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">d</span><span class="o">=</span><span class="nx">deps</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">])</span> <span class="p">{</span>
                <span class="nx">scope</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Can\&#39;t resolve &#39;</span> <span class="o">+</span> <span class="nx">d</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="nx">func</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">scope</span> <span class="o">||</span> <span class="p">{},</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
        <span class="p">}</span>        
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>All we do is to attach the dependencies to the scope. The benefits here are that the developer should not write the dependencies as parameters. They are just part of the function&#39;s scope.</p>
<div class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">doSomething</span> <span class="o">=</span> <span class="nx">injector</span><span class="p">.</span><span class="nx">resolve</span><span class="p">([</span><span class="s1">&#39;service&#39;</span><span class="p">,</span> <span class="s1">&#39;router&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">other</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">service</span><span class="p">().</span><span class="nx">name</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Service&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">router</span><span class="p">().</span><span class="nx">name</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Router&#39;</span><span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">other</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">be</span><span class="p">(</span><span class="s1">&#39;Other&#39;</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">doSomething</span><span class="p">(</span><span class="s2">&quot;Other&quot;</span><span class="p">);</span>
</code></pre></div>
<h2>Final words</h2>

<p>The dependency injection is one of those things which we all do, but never think of. Even if you didn&#39;t hear about the term you probably use it million of times. </p>

<p>All the examples mentioned in this article could be seen <a href="https://github.com/krasimir/blog-posts/tree/master/JavaScriptDependencyInjection">here</a>.</p>

<p>This article was originally published at <a href="http://krasimirtsonev.com/blog/article/Dependency-injection-in-JavaScript">krasimirtsonev.com</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>CSS: :before and :after pseudo elements in practice</title>
   <link href="http://blog.webbox.io/2014/07/05/CSS-before-and-after-pseudo-elements-in-practice/"/>
   <updated>2014-07-05T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/07/05/CSS-before-and-after-pseudo-elements-in-practice</id>
   <content type="html"><![CDATA[<p>By definition <em>:before</em> and <em>:after</em> are CSS pseudo elements. You can use them to insert something before or after the content of an element. There are some great articles giving the basics, but I wanted to write down a blog post for the real use cases. Or, at least, to show what I&#39;m using them for.</p>

<h2>Syntax</h2>

<p>Let&#39;s say that we have the following simple html markup:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;</span>paragraph text<span class="nt">&lt;/p&gt;</span>
</code></pre></div>
<p>We are able to use a pseudo element like that:</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">p</span><span class="nd">:before</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;this is &quot;</span><span class="p">;</span>
    <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
    <span class="k">font-style</span><span class="o">:</span> <span class="k">italic</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>And the result is:</p>

<p><img src="/assets/post_images/csspseudoclasses/syntax.jpg" alt="CSS: :before and :after pseudo elements in practice"></p>

<p>Have in mind that you are actually adding an element before or after the content. It&#39;s not something which appear next to the selected element, but it is related to its content.</p>

<h2>Icons</h2>

<p>It is very popular to use <em>:before</em> or <em>:after</em> for displaying an icon. Because you are able to add every CSS style property, you could make the newly created element a block one and attach background image. </p>

<p>Again, we have the same markup <em>&lt;p&gt;paragraph text&lt;/p&gt;</em> and the following CSS:</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">p</span><span class="nd">:before</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
    <span class="k">background</span><span class="o">:</span> <span class="sx">url(&quot;icon.jpg&quot;)</span> <span class="k">no-repeat</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
    <span class="k">height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">6px</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><em>icon.jpg</em> is a 20x20 image exported from Photoshop. Here is how this looks in a browser:</p>

<p><img src="/assets/post_images/csspseudoclasses/icon.jpg" alt="CSS: :before and :after pseudo elements in practice"></p>

<h2>Styling external links</h2>

<p>I saw this in a good amount of products. It is a good practice to style differently the links which point to external resources. This could be easily done with the technique above. Let&#39;s say the following paragraph of text:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;</span>Krasimir Tsonev is <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;http://krasimirtsonev.com&quot;</span><span class="nt">&gt;</span>developer<span class="nt">&lt;/a&gt;</span>
who likes to write and <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://twitter.com/KrasimirTsonev&quot;</span><span class="nt">&gt;</span>tweet<span class="nt">&lt;/a&gt;</span>.<span class="nt">&lt;/p&gt;</span>
</code></pre></div>
<p>We could add a small icon after that link indicating that it points to page outside the current domain.</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">a</span> <span class="p">{</span>
    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
    <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
    <span class="k">color</span><span class="o">:</span> <span class="m">#000</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">a</span><span class="nd">:after</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
    <span class="k">background</span><span class="o">:</span> <span class="sx">url(&quot;icon-external.jpg&quot;)</span> <span class="k">no-repeat</span> <span class="k">top</span> <span class="k">right</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">14px</span><span class="p">;</span>
    <span class="k">height</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><img src="/assets/post_images/csspseudoclasses/links.jpg" alt="CSS: :before and :after pseudo elements in practice"></p>

<h2>Breadcrumbs (navigation)</h2>

<p>Usually when you do breadcrumbs you have links and separator between them. Instead of adding an element into the DOM you could achieve the same effect with pure css.</p>

<p>The HTML:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Team<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Developers<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/p&gt;</span>
</code></pre></div>
<p>Just a few lines of CSS:</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">a</span> <span class="p">{</span>
    <span class="k">text-decoration</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
    <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
    <span class="k">color</span><span class="o">:</span> <span class="m">#000</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">a</span><span class="nd">:after</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot; /&quot;</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">a</span><span class="nd">:first-child:before</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot; » &quot;</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">a</span><span class="nd">:last-child:after</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>And the result is this:</p>

<p><img src="/assets/post_images/csspseudoclasses/breadcrumbs.jpg" alt="CSS: :before and :after pseudo elements in practice"></p>

<p>There are few interesting things happening. Firstly, there is a bullet before all the links. I combined two pseudo elements <em>first-child</em> and <em>before</em> saying &quot;Add &#187; before the first link&quot;. At the end I did the same thing to remove the separator from the last link in the list.</p>

<p>I found this extremely helpful. Mainly because I don&#39;t have to take care about this in the code which generates the navigation. I mean if I have to build the same thing with PHP I should write some additional code. For example:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$links = array(&#39;Home&#39;, &#39;Team&#39;, &#39;Developers&#39;);
$str = &#39;» &#39;;
for($i=0; $i&lt;count($links); $i++) {
    $str .= &#39;&lt;a href=&quot;#&quot;&gt;&#39;.$links[$i].&#39;&lt;/a&gt;&#39;;
    if($i &lt; count($links)-1) {
        $str .= &#39; / &#39;;
    }
}
echo $str;
</code></pre></div>
<p>I.e. in the code above I added the bullet in front of the links and some logic for the separators inside PHP. That&#39;s somehow wrong, because the PHP code should not be responsible for the look of the things.</p>

<h2>Clearing floats</h2>

<p>Using <a href="http://krasimirtsonev.com/blog/article/css-using-float-property-navigation-layout-composition"><em>float</em></a> property is still quite popular. It helps a lot for layout organization. However, once an element is floated you need another element to clear the float. Otherwise the result is not so good. For example the following code:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Products<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec at purus ac lacus ultrices vehicula.<span class="nt">&lt;/p&gt;</span>
</code></pre></div><div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">a</span> <span class="p">{</span>
    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">100px</span><span class="p">;</span>
    <span class="o">...</span> <span class="n">other</span> <span class="n">styling</span>
<span class="p">}</span>
</code></pre></div>
<p>Will produce the following layout:</p>

<p><img src="/assets/post_images/csspseudoclasses/floating1.jpg" alt="CSS: :before and :after pseudo elements in practice"></p>

<p>The text should be below the links and instead of adding new DOM node you can use <em>:before</em> pseudo element to clear the float:</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">p</span><span class="nd">:before</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
    <span class="k">clear</span><span class="o">:</span> <span class="k">both</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p><img src="/assets/post_images/csspseudoclasses/floating2.jpg" alt="CSS: :before and :after pseudo elements in practice"></p>

<h2>Quoting</h2>

<p><em>:before</em> and <em>:after</em> are perfect for quoting text. Let&#39;s say that we have a smart thought and we want to format it.</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p&gt;</span> 
    Martin Fowler said
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;quoted&quot;</span><span class="nt">&gt;</span>Any fool can write code that a computer can understand. 
    Good programmers write code that humans can understand.<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/p&gt;</span>
</code></pre></div>
<p>The following effect could be achieved only with CSS:</p>

<p><img src="/assets/post_images/csspseudoclasses/quotes.jpg" alt="CSS: :before and :after pseudo elements in practice"></p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">span</span><span class="nc">.quoted</span> <span class="p">{</span>
    <span class="k">font-family</span><span class="o">:</span> <span class="n">Georgia</span><span class="p">;</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">14px</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">font-style</span><span class="o">:</span> <span class="k">italic</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">span</span><span class="nc">.quoted</span><span class="nd">:before</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;“&quot;</span><span class="p">;</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
    <span class="k">color</span><span class="o">:</span> <span class="m">#999</span><span class="p">;</span>
    <span class="k">line-height</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">6px</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">span</span><span class="nc">.quoted</span><span class="nd">:after</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot; ”&quot;</span><span class="p">;</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
    <span class="k">color</span><span class="o">:</span> <span class="m">#999</span><span class="p">;</span>
    <span class="k">line-height</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">4px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2>Arrows</h2>

<p>You know those little things which the designers add to the popups or the nice looking tooltips. It&#39;s kinda tricky to code them. Luckily you are able to solve the problem in your CSS file. No additional images or hacky JavaScript. Here is what I&#39;m talking about.</p>

<p><img src="/assets/post_images/csspseudoclasses/arrow1.jpg" alt="CSS: :before and :after pseudo elements in practice"></p>

<p>As a starting point our markup looks like that:</p>
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;h2&gt;</span>What is CSS?<span class="nt">&lt;/h2&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;popup&quot;</span><span class="nt">&gt;</span>
    Cascading Style Sheets is a style sheet language used for describing
    the presentation semantics of a document written in a markup language.
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>
<p>So, we have a title on the left and popup on the right. We need to add this little arrow on the left side of the description text, pointing to the title. Chris Coyier <a href="http://css-tricks.com/snippets/css/css-triangle/">explains</a> how to make an arrow with simply <em>border</em> styling. We can use that and append such an element to our popup.</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">h2</span> <span class="p">{</span>
    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">170px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.popup</span> <span class="p">{</span>
    <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">340px</span><span class="p">;</span>
    <span class="k">background</span><span class="o">:</span> <span class="m">#727272</span><span class="p">;</span>
    <span class="k">padding</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">6px</span><span class="p">;</span>
    <span class="k">color</span><span class="o">:</span> <span class="m">#FFF</span><span class="p">;</span>
    <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
    <span class="k">line-height</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.popup</span><span class="nd">:before</span> <span class="p">{</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">block</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> 
    <span class="k">height</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> 
    <span class="k">border-top</span><span class="o">:</span> <span class="m">12px</span> <span class="k">solid</span> <span class="k">transparent</span><span class="p">;</span>
    <span class="k">border-bottom</span><span class="o">:</span> <span class="m">12px</span> <span class="k">solid</span> <span class="k">transparent</span><span class="p">;</span>
    <span class="k">border-right</span><span class="o">:</span> <span class="m">12px</span> <span class="k">solid</span> <span class="m">#727272</span><span class="p">;</span> 
    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
    <span class="k">top</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
    <span class="k">left</span><span class="o">:</span> <span class="m">-12px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2>Styling titles</h2>

<p>Currently I&#39;m working on a project which is an one-page site. There are titles which devide the different sections. Every title is wrapped by two lines. Here is how the final design looks like:</p>

<p><img src="/assets/post_images/csspseudoclasses/titles.jpg" alt="CSS: :before and :after pseudo elements in practice"></p>

<p>Again really simple usage of <em>:before</em> and <em>:after</em>:</p>
<div class="highlight"><pre><code class="language-css" data-lang="css"><span class="nt">h2</span> <span class="p">{</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">h2</span><span class="nd">:after</span> <span class="p">{</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">8px</span> <span class="m">20px</span><span class="p">;</span>
    <span class="k">height</span><span class="o">:</span> <span class="m">3px</span><span class="p">;</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot; &quot;</span><span class="p">;</span>
    <span class="k">text-shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
    <span class="k">background-color</span><span class="o">:</span> <span class="m">#999</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">140px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">h2</span><span class="nd">:before</span> <span class="p">{</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">inline</span><span class="o">-</span><span class="k">block</span><span class="p">;</span>
    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span> <span class="m">20px</span> <span class="m">8px</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">height</span><span class="o">:</span> <span class="m">3px</span><span class="p">;</span>
    <span class="k">content</span><span class="o">:</span> <span class="s2">&quot; &quot;</span><span class="p">;</span>
    <span class="k">text-shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
    <span class="k">background-color</span><span class="o">:</span> <span class="m">#999</span><span class="p">;</span>
    <span class="k">width</span><span class="o">:</span> <span class="m">140px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2>Conclusion</h2>

<p>The most important benefit of pseudo <em>:after</em> and <em>:before</em> elements is that you are able style your HTML without to add new DOM nodes. I really like to read clean and semantic markup. CSS is the place for all the visual things and it is great that we have such an instrument.</p>

<h2>Examples</h2>

<p>All the examples used in this article are available <a href="https://github.com/krasimir/blog-posts/tree/master/CSSUsingbeforeandafter">here</a>.</p>

<h2>Resources</h2>

<ul>
<li><a href="http://css-tricks.com/pseudo-class-selectors/">Meet the Pseudo Class Selectors</a></li>
<li><a href="http://css-tricks.com/snippets/css/css-triangle/">CSS Triangle</a></li>
<li><a href="http://coding.smashingmagazine.com/2011/07/13/learning-to-use-the-before-and-after-pseudo-elements-in-css/">Learning To Use The :before And :after Pseudo-Elements In CSS</a></li>
</ul>

<p>This article was originally published at <a href="http://krasimirtsonev.com/blog/article/CSS-before-and-after-pseudo-elements-in-practice">krasimirtsonev.com</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Introduction to Macros with Sweet.js</title>
   <link href="http://blog.webbox.io/2014/07/03/sweet-js-ile-javascript-macrolar/"/>
   <updated>2014-07-03T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/07/03/sweet-js-ile-javascript-macrolar</id>
   <content type="html"><![CDATA[<p>As far as you know, we mostly use same code over and over again on JavaScript.
Sometimes this makes huge time-loss and creates code confusion.</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>There are some <strong>things</strong> in this code that we repeat unintentionally and
surprise! there is a way to simplify this:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">from</span> <span class="mi">0</span> <span class="nx">to</span> <span class="mi">10</span> <span class="nx">as</span> <span class="nx">i</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>This is a bit more <strong>declarative</strong> and readable/editable code. Let’s create
more smaller version:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">to</span> <span class="mi">10</span> <span class="nx">as</span> <span class="nx">i</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>Thanks to <a href="www.mozilla.org">Mozilla</a>, they built a sweet JavaScript library called <a href="http://sweetjs.org">Sweet.js</a>.</p>

<p>We can edit our Sweet.js macro via using <a href="http://sweetjs.org/browser/editor.html">macro editor</a>.</p>

<p>Let’s write down the macro we&#39;ve been considering above but first, we need to
examine the macro structure.</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">macro</span> <span class="o">&lt;</span><span class="nx">NAME</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="nx">rule</span> <span class="p">{</span> <span class="o">&lt;</span><span class="nx">CODE</span><span class="o">&gt;</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="o">&lt;</span><span class="nx">OUTPUT</span><span class="o">&gt;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>We need to place a <code>$</code> sign in-front of the macro variable. We can call our
macro:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;NAME&gt; &lt;CODE&gt;
</code></pre></div>
<p>Here is an example macro:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">macro</span> <span class="nx">variableDemo</span> <span class="p">{</span>
    <span class="nx">rule</span> <span class="p">{</span> <span class="nx">$x</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">$x</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>and usage:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">variableDemo</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span>
</code></pre></div>
<p>this will produce:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">variableDemo</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></div>
<h2>Design of Macro</h2>

<p>Let’s try to design a macro with <code>for</code></p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">to</span> <span class="mi">10</span> <span class="nx">as</span> <span class="nx">index</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>call it:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">to</span> <span class="nx">$value</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$code</span>
</code></pre></div>
<p>In this point, <code>$value</code> is <code>10</code>, <code>$index</code> is <code>index</code> and <code>$code</code> is
 <code>{ console.log(index); }</code>. Let’s write down our macro:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">macro</span> <span class="nx">to</span> <span class="p">{</span>
    <span class="nx">rule</span> <span class="p">{</span> <span class="nx">$value</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$code</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="p">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><code>...</code> used as a <strong>placeholder</strong> and holds the code below;</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">macro</span> <span class="nx">to</span> <span class="p">{</span>
    <span class="nx">rule</span> <span class="p">{</span> <span class="nx">$value</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$code</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">$index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">$index</span> <span class="o">&lt;</span> <span class="nx">$value</span><span class="p">;</span> <span class="nx">$index</span><span class="o">++</span><span class="p">)</span> <span class="nx">$code</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Well, we have a macro to use :)</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">to</span> <span class="mi">30</span> <span class="nx">as</span> <span class="nx">i</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>out puts:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">30</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>Let’s extend this macra a little bir and add another design to it.</p>

<p>Right now, let’s set the <strong>initial value</strong>;</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">to</span> <span class="mi">30</span> <span class="nx">start</span> <span class="nx">from</span> <span class="mi">10</span> <span class="nx">as</span> <span class="nx">i</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>this means, loop will start from <code>10</code>.</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">macro</span> <span class="nx">to</span> <span class="p">{</span>
    <span class="nx">rule</span> <span class="p">{</span> <span class="nx">$value</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$code</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">$index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">$index</span> <span class="o">&lt;</span> <span class="nx">$value</span><span class="p">;</span> <span class="nx">$index</span><span class="o">++</span><span class="p">)</span> <span class="nx">$code</span>
    <span class="p">}</span>

    <span class="nx">rule</span> <span class="p">{</span> <span class="nx">$value</span> <span class="nx">start</span> <span class="nx">from</span> <span class="nx">$from</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$code</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">$index</span> <span class="o">=</span> <span class="nx">$from</span><span class="p">;</span> <span class="nx">$index</span> <span class="o">&lt;</span> <span class="nx">$value</span><span class="p">;</span> <span class="nx">$index</span><span class="o">++</span><span class="p">)</span> <span class="nx">$code</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Now, <code>to</code> will respond to two different designs in two different ways.</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">to</span> <span class="mi">30</span> <span class="nx">start</span> <span class="nx">from</span> <span class="mi">10</span> <span class="nx">as</span> <span class="nx">i</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>will produce;</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">30</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<h2>Using / Merging Macros</h2>

<p>One of the best parts of Sweet.js that <strong>a macro can use/call other macro</strong>.</p>

<p>Lets extend an example above;</p>

<p><code>to 30 start from 10 as i</code> we need to polish this a bit:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">from</span> <span class="mi">10</span> <span class="nx">to</span> <span class="mi">30</span> <span class="nx">as</span> <span class="nx">index</span>
</code></pre></div>
<p>more readable. This means we need to create a <code>from</code> macro!</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">macro</span> <span class="nx">from</span> <span class="p">{</span>
    <span class="nx">rule</span> <span class="p">{</span> <span class="nx">$from</span> <span class="nx">to</span> <span class="nx">$value</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$code</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{}</span>
<span class="p">}</span>
</code></pre></div>
<p>Let’s plug <code>to</code> macro to our <code>from</code> macro.</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">macro</span> <span class="nx">from</span> <span class="p">{</span>
    <span class="nx">rule</span> <span class="p">{</span> <span class="nx">$from</span> <span class="nx">to</span> <span class="nx">$value</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$code</span> <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">to</span> <span class="nx">$value</span> <span class="nx">start</span> <span class="nx">from</span> <span class="nx">$from</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$code</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p><code>from</code> macro will also call <code>to</code> :)</p>

<p>Let’s try the code below:</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">macro</span> <span class="nx">from</span> <span class="p">{</span>
    <span class="nx">rule</span> <span class="p">{</span>
        <span class="nx">$start</span> <span class="nx">to</span> <span class="nx">$to</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$block</span>
    <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">to</span> <span class="nx">$to</span> <span class="nx">start</span> <span class="nx">from</span> <span class="nx">$start</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$block</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="nx">macro</span> <span class="nx">to</span> <span class="p">{</span>
    <span class="nx">rule</span> <span class="p">{</span>
        <span class="nx">$to</span> <span class="nx">start</span> <span class="nx">from</span> <span class="nx">$from</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$block</span>
    <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">$index</span> <span class="o">=</span> <span class="nx">$from</span><span class="p">;</span> <span class="nx">$index</span> <span class="o">&lt;</span> <span class="nx">$to</span><span class="p">;</span> <span class="nx">$index</span><span class="o">++</span><span class="p">)</span> <span class="nx">$block</span>
    <span class="p">}</span>
    <span class="nx">rule</span> <span class="p">{</span>
        <span class="nx">$to</span> <span class="nx">as</span> <span class="nx">$index</span> <span class="nx">$block</span>
    <span class="p">}</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">$index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">$index</span> <span class="o">&lt;</span> <span class="nx">$to</span><span class="p">;</span> <span class="nx">$index</span><span class="o">++</span><span class="p">)</span> <span class="nx">$block</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="nx">to</span> <span class="mi">30</span> <span class="nx">as</span> <span class="nx">i</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">from</span> <span class="mi">10</span> <span class="nx">to</span> <span class="mi">30</span> <span class="nx">as</span> <span class="nx">index</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">to</span> <span class="mi">10</span> <span class="nx">start</span> <span class="nx">from</span> <span class="mi">2</span> <span class="nx">as</span> <span class="nx">i</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>Now, we have created a macro which provides a custom loop mechanism.</p>

<p><a href="http://sweetjs.org">Sweet.js</a> is highly details macro library. That would be really helpful
if you check and read it. If you want to know more about <strong>repetition,
patterns, hygiene</strong> or <code>infix</code> please take a look at 
<a href="http://sweetjs.org/doc/main/sweet.html">http://sweetjs.org/doc/main/sweet.html</a></p>

<p>If I can find more time, I&#39;m planning to write more about this topic in the
future!</p>
]]></content>
 </entry>
 
 <entry>
   <title>Full Text Search Tip!</title>
   <link href="http://blog.webbox.io/2014/06/29/full-text-search-tip/"/>
   <updated>2014-06-29T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/06/29/full-text-search-tip</id>
   <content type="html"><![CDATA[<p>Couple of days ago, I was watching <a href="http://codeschool.com" title="CodeSchool">CodeSchool</a>’s <strong>CodeTv</strong>. If you are 
a regular subscriber of CodeSchool, you have a chance to subscribe CodeTv via
iTunes.</p>

<p>There are always great topics, videos, information available on CodeTv. Since
last couple months, they have started a new series called &quot;<strong>Soup to Bits</strong>&quot;.
If you ever complete the challenges, this would be great for you to verify
your knowledge.</p>

<p>I was watching <strong>Rails for Zombies 2</strong> episode. It’s <strong>2 hours and 15 minutes</strong> 
long. From scratch, <a href="https://twitter.com/caike">Carlos Souza</a> and <a href="https://twitter.com/greggpollack">Greg Pollack</a> were building a
<a href="rubyonrails.org">Rails</a> application. That was all ok, normal stuff were going on.</p>

<p>In the example, there was a database table called <code>Books</code>. Fields like;
<code>title</code>, <code>description</code> and <code>author</code>. All text / String fields.</p>

<p>All we need is to make search query on <code>title</code>, <code>description</code> and <code>author</code>.</p>

<p>A classic and most common approach is use <code>SELECT LIKE</code> statement and iterate
over those three fields. Right ? Whatever you use? A classic <code>WHERE</code> situation.</p>
<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="p">:</span>
<span class="p">:</span>
<span class="k">WHERE</span>
    <span class="n">books</span><span class="p">.</span><span class="n">title</span> <span class="k">LIKE</span> <span class="s1">&#39;%KEYWORD%&#39;</span> <span class="k">or</span>
    <span class="n">books</span><span class="p">.</span><span class="n">description</span> <span class="k">LIKE</span> <span class="s1">&#39;%KEYWORD%&#39;</span> <span class="k">or</span>
    <span class="n">books</span><span class="p">.</span><span class="n">author</span> <span class="k">LIKE</span> <span class="s1">&#39;%KEYWORD%&#39;</span>
<span class="p">:</span>
<span class="p">:</span>
</code></pre></div>
<p>Well, here is what <a href="https://twitter.com/caike">Carlos</a> did; He added another field to table called
<code>keywords</code> and made the model’s save method to grab + join those three
fields in to a single big String and putted as <code>keywords</code> field’s value.</p>

<p>Long story short, on every <strong>Create</strong> or <strong>Update</strong> operation; get all the
fields you want to search in it, change it to lower case and concat all and
place as <code>keywords</code> value.</p>

<h2>Rails way</h2>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="p">:</span>
<span class="n">scope</span> <span class="ss">:search</span><span class="p">,</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">keyword</span><span class="p">){</span> <span class="n">where</span><span class="p">(</span><span class="s1">&#39;keywords LIKE ?&#39;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">keyword</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2">%&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">keyword</span><span class="o">.</span><span class="n">present?</span> <span class="p">}</span>
<span class="p">:</span>
<span class="n">before_save</span> <span class="ss">:set_keywords</span> <span class="c1"># method to call before every save operation</span>
<span class="p">:</span>
<span class="kp">protected</span>
  <span class="k">def</span> <span class="nf">set_keywords</span>
    <span class="nb">self</span><span class="o">.</span><span class="n">keywords</span> <span class="o">=</span> <span class="o">[</span><span class="n">title</span><span class="p">,</span> <span class="n">author</span><span class="p">,</span> <span class="n">description</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:downcase</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div>
<p>Doesn’t matter which framework of platform, simple idea. Before you call save,
collect the fields you’d like to search, make them all lowercase, and
concat that with a single-space char!.</p>

<p>Now you can make <strong>a single query</strong> for searching instead of longer 
queries for looking up <strong>three different fields</strong> 8)</p>

<p><img src="/assets/post_images/full-text-search-tip.png" alt="CodeTV - Soup to Bits: Rails for Zombies 2"></p>
]]></content>
 </entry>
 
 <entry>
   <title>Easily Share Your Localhost With Ngrok</title>
   <link href="http://blog.webbox.io/2014/06/14/easily-share-your-localhost-with-ngrok/"/>
   <updated>2014-06-14T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/06/14/easily-share-your-localhost-with-ngrok</id>
   <content type="html"><![CDATA[<p>You ask people to check your app on your local development environment. It’s 
time consuming and maybe sometimes kinda embarassing.</p>

<p>Enter Ngrok. A tool that allows you to share your localhost to anyone on the 
internet.</p>

<p><strong>Ngrok</strong> is a tiny tool which was written in Go programming language. This means
it can be executable in any platfrom ( Linux, Mac OS X, Windows ) without any
dependency.</p>

<p>To use <strong>Ngrok</strong> you can <a href="http://ngrok.com/download">download</a> the zip file or if you are using Mac you can
install via Brew.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">brew install ngrok
</code></pre></div>
<p>After installing Ngrok you can share your localhost to anyone.</p>

<p>E.g you have a Rails or Node.js working on <code>localhost:3000</code>. All you have to do is</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">ngrok 3000
</code></pre></div>
<p>If it succeeds you’ll see something like below.</p>

<p><img src="/assets/post_images/ngrok.png" alt="Ngrok"></p>

<p>Voila your app is on the internet and anyone can access it by using the HTTP 
and HTTPS links that <strong>Ngrok</strong> generates :)</p>
]]></content>
 </entry>
 
 <entry>
   <title>Jstanbul Meetup #001 in a bytesize!</title>
   <link href="http://blog.webbox.io/2014/05/30/js-istanbul-001-in-a-bytesize/"/>
   <updated>2014-05-30T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/05/30/js-istanbul-001-in-a-bytesize</id>
   <content type="html"><![CDATA[<p><iframe src="http://www.tumblr.com/video/webboxio/87233775544/768" 
          id="tumblr_video_iframe_87233775544"
          class="tumblr_video_iframe" width="100%"
          height="405"
          style="display:block;background-color:transparent;overflow:hidden;"
          allowTransparency="true" frameborder="0"
          scrolling="no"
          webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe><br></p>

<p>Istanbul’s first JavaScript community Jstanbul started regular meetups and the first 
one happened in <a href="http://girisimfabrikasi.com">Girişim Fabrikası</a>. As webBox, 
we were there! And it was crowded!</p>
]]></content>
 </entry>
 
 <entry>
   <title>codeFront.io Closing Notes!</title>
   <link href="http://blog.webbox.io/2014/05/13/closing-in-a-bytesize/"/>
   <updated>2014-05-13T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/05/13/closing-in-a-bytesize</id>
   <content type="html"><![CDATA[<p><iframe src="http://www.tumblr.com/video/webboxio/85608480704/768" 
          id="tumblr_video_iframe_85608480704"
          class="tumblr_video_iframe" width="100%"
          height="405"
          style="display:block;background-color:transparent;overflow:hidden;"
          allowTransparency="true" frameborder="0"
          scrolling="no"
          webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe><br></p>
]]></content>
 </entry>
 
 <entry>
   <title>We &lt;3 Rails Girls Summer of Code</title>
   <link href="http://blog.webbox.io/2014/04/06/we-love-rails-girls-summer-of-code-as-webbox-io/"/>
   <updated>2014-04-06T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2014/04/06/we-love-rails-girls-summer-of-code-as-webbox-io</id>
   <content type="html"><![CDATA[<p>As <a href="http://webbox.io">webBox.io</a> is a Ruby shop, we are all long time Rails users. And we really love <strong>Ruby</strong> and <strong>Rails</strong>.  We always seek ways to spread the Ruby love and give back to this great community. In this light we have supported <a href="http://railsgirls.com/istanbul">Rails Girls Istanbul</a> and <a href="http://railsgirls.com/ankara">Rails Girls Ankara</a> in Turkey, both beginners workshops to web development. </p>

<p><img src="/assets/post_images/rgsoc.png" alt="Rails Girls Summer of Code"></p>

<!-- more -->

<p>Today we’re excited to announce that <strong>we will support this year’s <a href="http://www.railsgirlssummerofcode.org">Rails Girls Summer of Code</a> by creating 20 special tickets for codeFront.io</strong>, a frontend conference that will take place in <strong>Linz</strong> in May 10.  </p>

<p>Priced as a standard ticket <em>(€125)</em>, by buying the Rails Girls Summer of Code ticket you get to support a great cause - <strong>getting more newcomers into Open Source</strong> - and you secure your seat at one of the largest web development conferences in Europe. <strong>100% of the sales</strong> of these 20 tickets goes directly to the Rails Girls Summer of Code.</p>

<p><strong>Get your special Rails Girls Summer of Code ticket at <a href="http://codefront.io">codeFront.io</a>!</strong></p>
]]></content>
 </entry>
 
 <entry>
   <title>Auto Resizing UITextView</title>
   <link href="http://blog.webbox.io/2014/03/19/auto-resizing-uitextview/"/>
   <updated>2014-03-19T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2014/03/19/auto-resizing-uitextview</id>
   <content type="html"><![CDATA[<ul>
<li>Add a <code>UITextView</code> inside a <code>UITableViewCell</code> and adjust the cell&#39;s size, so that <code>UITextView</code> will also be resized</li>
<li>Add a <code>UITextView</code> to the <code>UIViewController</code> (or a subclass of it) and resize the <code>UITextView</code> itself</li>
</ul>

<p>But I&#39;ve used non of the above in my upcoming app. I&#39;ve found a tweaked version of the second technique.</p>

<!-- more -->

<h2>Don&#39;t resize the <code>UITextView</code></h2>

<p>Instead adjust its <code>contentInset</code> property. So that, you can have a <code>UITextView</code> that <strong>seems like</strong> adjusting its size.</p>

<p>This technique also comes with a very useful benefit that I was thinking ways to
solve it. Assume that you are resizing <code>UITextView</code> every time keyboard is shown 
or hidden. When you assign a pattern image or color to <code>UITextView</code> as background 
color,<del>keyboard animation causes <code>UITextView</code> to adjust its size improperly during 
its animation</del>. And this lets the super view of <code>UITextView</code> to say &#39;Hello!&#39; between
<code>UITextView</code> and the keyboard. (At the second thought, I figured out that we can 
fix this animation stuff with providing a <code>UIViewAnimationCurve</code> to <code>UIView</code>&#39;s
animate methods.)</p>

<p><img src="/assets/post_images/resizing.gif" alt="Demo"></p>

<p>But by adjusting only contentInset of <code>UITextView</code>, you no longer need to think about it!</p>

<h2>Talk is cheap, show me the code</h2>

<p>Firstly, as you know, we need to add our lovely <code>UIViewController</code> (or probably a 
subclass of it) as observer of keyboard notifications:</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="c1">// Register for keyboard notifications</span>
<span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="n">addObserver</span><span class="o">:</span><span class="n">self</span> <span class="n">selector</span><span class="o">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">keyboardWillShow</span><span class="o">:</span><span class="p">)</span> <span class="n">name</span><span class="o">:</span><span class="n">UIKeyboardWillShowNotification</span> <span class="n">object</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="n">addObserver</span><span class="o">:</span><span class="n">self</span> <span class="n">selector</span><span class="o">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">keyboardWillHide</span><span class="o">:</span><span class="p">)</span> <span class="n">name</span><span class="o">:</span><span class="n">UIKeyboardWillHideNotification</span> <span class="n">object</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
</code></pre></div>
<p>Then our keyboard notification handler methods:</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - Notifications</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">keyboardWillShow:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">note</span> <span class="p">{</span>

    <span class="n">CGRect</span> <span class="n">keyboardFrame</span> <span class="o">=</span> <span class="p">[</span><span class="n">note</span><span class="p">.</span><span class="n">userInfo</span><span class="p">[</span><span class="n">UIKeyboardFrameEndUserInfoKey</span><span class="p">]</span> <span class="n">CGRectValue</span><span class="p">];</span>
    <span class="n">UIEdgeInsets</span> <span class="n">contentInset</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">contentInset</span><span class="p">;</span>
    <span class="n">contentInset</span><span class="p">.</span><span class="n">bottom</span> <span class="o">=</span> <span class="n">CGRectGetHeight</span><span class="p">(</span><span class="n">keyboardFrame</span><span class="p">);</span>
    <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">contentInset</span> <span class="o">=</span> <span class="n">contentInset</span><span class="p">;</span>
    <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">scrollIndicatorInsets</span> <span class="o">=</span> <span class="n">contentInset</span><span class="p">;</span>

<span class="p">}</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">keyboardWillHide:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">note</span> <span class="p">{</span>

    <span class="n">UIEdgeInsets</span> <span class="n">contentInset</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">contentInset</span><span class="p">;</span>
    <span class="n">contentInset</span><span class="p">.</span><span class="n">bottom</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>

    <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">contentInset</span> <span class="o">=</span> <span class="n">contentInset</span><span class="p">;</span>
    <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">scrollIndicatorInsets</span> <span class="o">=</span> <span class="n">contentInset</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div>
<p>Alternatively, you can add this piece of code to <code>- keyboardWillShow:</code> method to 
make text view auto scroll to current cursor location:</p>
<div class="highlight"><pre><code class="language-objective-c" data-lang="objective-c"><span class="n">TimeInterval</span> <span class="n">animationDuration</span> <span class="o">=</span> <span class="p">[</span><span class="n">note</span><span class="p">.</span><span class="n">userInfo</span><span class="p">[</span><span class="n">UIKeyboardAnimationDurationUserInfoKey</span><span class="p">]</span> <span class="n">doubleValue</span><span class="p">];</span>
<span class="n">CGRect</span> <span class="n">caretFrame</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">textView</span> <span class="n">caretRectForPosition</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">selectedTextRange</span><span class="p">.</span><span class="n">start</span><span class="p">];</span>

<span class="p">[</span><span class="n">UIView</span> <span class="n">animateWithDuration</span><span class="o">:</span><span class="n">animationDuration</span>
                 <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
                     <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">textView</span> <span class="n">scrollRectToVisible</span><span class="o">:</span><span class="n">caretFrame</span> <span class="n">animated</span><span class="o">:</span><span class="nb">NO</span><span class="p">];</span>
                 <span class="p">}];</span>
</code></pre></div>
<p>There is a problem with <code>UIScrollView</code>&#39;s (and its subviews&#39;) <code>- scrollRectToVisible:animated:</code> method.
If you pass <code>YES</code> to animate the scrolling, it won&#39;t scroll a pixel at all.
So, I found a workaround to force it to animate with <code>UIView</code>&#39;s animate method.</p>

<p>If you find some bugs, have suggestions, or any other stuff, feel free to drop a line!</p>
]]></content>
 </entry>
 
 <entry>
   <title>Something strange going on webBox office!</title>
   <link href="http://blog.webbox.io/2014/03/07/something-strange-going-on-at-webbox-office/"/>
   <updated>2014-03-07T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2014/03/07/something-strange-going-on-at-webbox-office</id>
   <content type="html"><![CDATA[<!-- more -->

<p><img src="/assets/post_images/something-strange.jpg" alt="Something very strange"></p>
]]></content>
 </entry>
 
 <entry>
   <title>CoffeeScript + Backbone.js = &lt;3</title>
   <link href="http://blog.webbox.io/2014/01/18/coffeescript-and-backbone-is-love/"/>
   <updated>2014-01-18T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2014/01/18/coffeescript-and-backbone-is-love</id>
   <content type="html"><![CDATA[<p><img src="/assets/post_images/coffeescript/coffeescript1.jpg" alt="CoffeeScript 1"></p>

<p>You can <strong><a href="https://github.com/webBoxio/ws-coffee">download / examine</a></strong> our sample application which is done on-the-fly
at the course.</p>

<p><img src="/assets/post_images/coffeescript/coffeescript2.jpg" alt="CoffeeScript 2"></p>

<p>Fatih is installing <code>backbone.js</code> via <code>bower</code></p>
]]></content>
 </entry>
 
 <entry>
   <title>webBox was judge at Kodathon</title>
   <link href="http://blog.webbox.io/2013/12/21/webbox-was-judge-at-kodathon/"/>
   <updated>2013-12-21T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2013/12/21/webbox-was-judge-at-kodathon</id>
   <content type="html"><![CDATA[<p><img src="/assets/post_images/kodathon/kodathon1.jpg" alt="Kodathon 1"></p>

<p><img src="/assets/post_images/kodathon/kodathon2.jpg" alt="Kodathon 2"></p>

<p><img src="/assets/post_images/kodathon/kodathon3.jpg" alt="Kodathon 3"></p>
]]></content>
 </entry>
 
 <entry>
   <title>vienna.rb Meetup #9</title>
   <link href="http://blog.webbox.io/2013/12/05/viennarb-meetup-9/"/>
   <updated>2013-12-05T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2013/12/05/viennarb-meetup-9</id>
   <content type="html"><![CDATA[<p><a href="http://webbox.io">webBox.io</a> team met beautiful people, enjoyed great talks!</p>

<p><img src="/assets/post_images/viennarb/viennarb4.jpg" alt="vienna.rb 4"></p>

<!-- more -->

<p><img src="/assets/post_images/viennarb/viennarb1.jpg" alt="vienna.rb 1"></p>

<p><img src="/assets/post_images/viennarb/viennarb2.jpg" alt="vienna.rb 2"></p>

<p><img src="/assets/post_images/viennarb/viennarb3.jpg" alt="vienna.rb 3"></p>

<p><img src="/assets/post_images/viennarb/viennarb5.jpg" alt="vienna.rb 5"></p>
]]></content>
 </entry>
 
 <entry>
   <title>webBox.io meet Codeship.io!</title>
   <link href="http://blog.webbox.io/2013/12/02/webbox-meets-codeship/"/>
   <updated>2013-12-02T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2013/12/02/webbox-meets-codeship</id>
   <content type="html"><![CDATA[<p><a href="http://webbox.io">webBox.io</a> team met beautiful people, enjoyed great talks!</p>

<p><img src="/assets/post_images/codeshipio/codeshipio5.jpg" alt="codeShip.io 5"></p>

<!-- more -->

<p><img src="/assets/post_images/codeshipio/codeshipio1.jpg" alt="codeShip.io 1"></p>

<p><img src="/assets/post_images/codeshipio/codeshipio2.jpg" alt="codeShip.io 2"></p>

<p><img src="/assets/post_images/codeshipio/codeshipio3.jpg" alt="codeShip.io 3"></p>

<p><img src="/assets/post_images/codeshipio/codeshipio4.jpg" alt="codeShip.io 4"></p>
]]></content>
 </entry>
 
 <entry>
   <title>iOS 101 Training Course started!</title>
   <link href="http://blog.webbox.io/2013/11/30/ios-101-training-course-started/"/>
   <updated>2013-11-30T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2013/11/30/ios-101-training-course-started</id>
   <content type="html"><![CDATA[<!-- more -->

<p><img src="/assets/post_images/ios-101.jpg" alt="iOS 101"></p>
]]></content>
 </entry>
 
 <entry>
   <title>Building iOS app for yemekguru.com at the iOS 101 Bootcamp!</title>
   <link href="http://blog.webbox.io/2013/11/30/building-ios-app-for-yemekguru-com-at-ios-bootcamp/"/>
   <updated>2013-11-30T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2013/11/30/building-ios-app-for-yemekguru-com-at-ios-bootcamp</id>
   <content type="html"><![CDATA[<!-- more -->

<p><img src="/assets/post_images/yemekguru-com-ios.jpg" alt="yemekguru iOS App"></p>
]]></content>
 </entry>
 
 <entry>
   <title>Our first Training Course: Web101</title>
   <link href="http://blog.webbox.io/2013/11/23/this-is-our-first-training-course-web101-by-ugur/"/>
   <updated>2013-11-23T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2013/11/23/this-is-our-first-training-course-web101-by-ugur</id>
   <content type="html"><![CDATA[<p>This is our first Training Course: Web101 by Uğur “vigo” Özyılmazel.
Details can be found at: <a href="http://webbox.io/workshop/en/web101/">http://webbox.io/workshop/en/web101/</a></p>

<p><img src="/assets/post_images/web101.jpg" alt="Web 101"></p>
]]></content>
 </entry>
 
 <entry>
   <title>Secret angel of webBox.io</title>
   <link href="http://blog.webbox.io/2013/11/23/secret-angel-of-webbox-io-billion-thanks-to-yesim/"/>
   <updated>2013-11-23T00:00:00+02:00</updated>
   <id>http://blog.webbox.io/2013/11/23/secret-angel-of-webbox-io-billion-thanks-to-yesim</id>
   <content type="html"><![CDATA[<p>Secret angel of webBox.io. Billion thanks to Yeşim Özyılmazel for
her awesome performance today at the <a href="http://www.ozgurwebgunleri.org.tr/">Özgür Web Teknoloji Günleri</a>.</p>

<p><img src="/assets/post_images/yesim.jpg" alt="Yesim Ozyilmazel"></p>
]]></content>
 </entry>
 
 <entry>
   <title>Railsgirls / İstanbul, October 4-5, 2013</title>
   <link href="http://blog.webbox.io/2013/10/07/railsgirls-istanbul-october-4-5/"/>
   <updated>2013-10-07T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2013/10/07/railsgirls-istanbul-october-4-5</id>
   <content type="html"><![CDATA[<p><img src="/assets/post_images/railsgirls/railsgirls1.jpg" alt="Rails Girls 1"></p>

<p>We as <strong>webBox</strong> was one of the supporters to this lovely event. We arrived to 
location on Friday and brought our roll-up banner and brochures. The installation 
of development environment has already started to the girls’ laptops when we 
arrived there. Also a little welcome party was in progress!</p>

<p>On Friday, I met with <a href="http://twitter.com/koos">Jan Kus</a>. He is from Cologne / Germany. One of the Rails
Coaches. After we chat a little, we’ve found many mutual friends from Demoscene
world! That was really great! He is one of the co-founders of <a href="http://railslove.com">RailsLove.com</a>
company. Also, <a href="http://twitter.com/ongunella">Öngün Eryılmaz</a>,
<a href="http://twitter.com/liane_thoennes">Liane Thönnes</a> and <a href="http://twitter.com/schlafturbine">Tatjana Lajendäcker</a>
were coming from Germany for Railsgirls İstanbul too...</p>

<p><img src="/assets/post_images/railsgirls/railsgirls2.jpg" alt="Rails Girls 2"></p>

<p>The real event was the following day which was Saturday. I <strong>(Uğur Özyılmazel)</strong> 
brought two talented PHP programmers (<strong>Caner Türkmen</strong> and <strong>Erdem Ertüzün</strong>) with me.
I wanted to show them other technologies besides PHP.</p>

<p><img src="/assets/post_images/railsgirls/railsgirls3.jpg" alt="Rails Girls 3"></p>

<p><img src="/assets/post_images/railsgirls/railsgirls4.jpg" alt="Rails Girls 4"></p>

<p>There were around <strong>40</strong> learners. From <strong>9</strong> years old to *<em>35</em>.
We met the youngest computer genius there!</p>

<p><img src="/assets/post_images/railsgirls/railsgirls5.jpg" alt="Rails Girls 5"></p>

<p>Another great thing about this event was <a href="http://skroutz.gr/">Skroutz</a>. I did not know that
one of the main organizers of <a href="http://euruko2013.org/">Euroko</a> is a member of Skroutz team.
It was great to meet <a href="http://twitter.com/gfotos">Fotos Georgiadis</a>! Also met with Akilas Marousis too!</p>

<p><img src="/assets/post_images/railsgirls/railsgirls6.png" alt="Rails Girls 6"></p>

<p>We presented <a href="http://webbox.io">webBox.io</a> to attendants with a short-slide. 
Teams are already gathered and started to work!. I forgot to mention,
there were lovely breakfast and drinks too!</p>

<p><img src="/assets/post_images/railsgirls/railsgirls7.png" alt="Rails Girls 7"></p>

<p>It was around <strong>14:30</strong> and I presented <code>git</code> to attendants. This was very simple
and introductory level presentation to <code>git</code>; “What is version controlling?&quot;
&quot;What is distributed source code management?&quot; and so on.</p>

<p><img src="/assets/post_images/railsgirls/railsgirls8.jpg" alt="Rails Girls 8"></p>

<p><img src="/assets/post_images/railsgirls/railsgirls9.jpg" alt="Rails Girls 9"></p>

<p><img src="/assets/post_images/railsgirls/railsgirls10.jpg" alt="Rails Girls 10"></p>

<p>After another great lunch, they kept working on. There were other presentations like</p>

<ul>
<li>What is Bento Box?</li>
<li>What is a web design?</li>
<li>How did baby care make a better programmer?</li>
<li>Being a female developer</li>
<li>How to start your own business in Turkey?</li>
</ul>

<p><a href="http://devpod.tumblr.com/">devPod</a> podcast crew was there and did many interviews with the people. 
We left little bit earlier, therefore we couldn’t attend the after party. 
Overall, this was a great meeting and a workshop. We are really proud to be a part of it.</p>

<p><img src="/assets/post_images/railsgirls/railsgirls11.jpg" alt="Rails Girls 10"></p>

<p>We are planning to make more of this events in the future!
You can download our <code>git</code> presentation <a href="https://speakerdeck.com/webbox/git-101-ya-da-100">here</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>11th Sales Event</title>
   <link href="http://blog.webbox.io/2013/10/03/11th-sales-event/"/>
   <updated>2013-10-03T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2013/10/03/11th-sales-event</id>
   <content type="html"><![CDATA[<p>We as <a href="http://webbox.io">webBox.io</a> attended our first official meeting to introduce our company.
Not only we achieved to introduce webBox.io, we also introduced our 
other initiative <a href="http://funkyrobots.com">&quot;Funky Robots&quot;</a>.</p>

<p><img src="/assets/post_images/salesevent/salesevent7.jpg" alt="Sales Event 7"></p>

<!-- more -->

<p>We got together at our HQ in Seyrantepe. <strong>Uğur Özyılmazel</strong>, <strong>Tunç Dindaş</strong>, 
<strong>Erman Akçay</strong> and <strong>Ali Sırmabıyık</strong> left our office around 18:15 to go to 
Sun Plaza in Maslak where the meeting would take place.</p>

<p><img src="/assets/post_images/salesevent/salesevent1.jpg" alt="Sales Event 1"></p>

<p><img src="/assets/post_images/salesevent/salesevent2.jpg" alt="Sales Event 2"></p>

<p>When we arrived Sun Plaza / Sunplus, <strong>Ümit Ünker</strong> and his colleague <strong>Burak Adalı</strong>
welcomed us. <strong>Mr. Ünker</strong> was the organizer of this event and invited us 
personally to attend the meeting.</p>

<p><img src="/assets/post_images/salesevent/salesevent3.jpg" alt="Sales Event 3"></p>

<p>This meeting was specifically organized for us. Before the meeting, the 
<a href="http://webbox.io">webBox.io</a> and <a href="http://funkyrobots.com">Funky Robots</a> teams sat at Starbucks to discuss and brainstorm 
a little more about our game plan at the meeting.</p>

<p><img src="/assets/post_images/salesevent/salesevent4.jpg" alt="Sales Event 4"></p>

<p>The participation was quite good. There wasn’t much of a crowd but it was a 
well-chosen one to be honest. In total, there were around 20 people from
different professions. Mr. Özyılmazel did his presentation about webBox.io
and Funky Robots after a brief introduction by Mr. Ünker.</p>

<p><img src="/assets/post_images/salesevent/salesevent5.jpg" alt="Sales Event 5"></p>

<p>After the presentation, the participants had free time to talk to other
participants and exchange business cards. This was a great opportunity for networking.</p>

<p><img src="/assets/post_images/salesevent/salesevent6.jpg" alt="Sales Event 6"></p>

<p>Following the networking time, all the participants got together for a group 
photo in the <strong>Da Vinci Auditorium</strong> using one of the applications developed
by the Funky Robots team. It’s called <a href="http://supernoircam.com">Super Noir Camera</a>.</p>

<p>After the group photo, all the participants promised each other that they would 
meet again at another meeting or training and they left the event hall.</p>

<p>You can download our presentation for <a href="https://speakerdeck.com/webbox/webbox-dot-io-introduction">webBox.io</a> and <a href="https://speakerdeck.com/webbox/funky-robots-and-super-noir-cam-introduction">Funky Robots</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>6 days to go: Railsgirls İstanbul</title>
   <link href="http://blog.webbox.io/2013/09/28/6-days-to-go-railsgirls-istanbul/"/>
   <updated>2013-09-28T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2013/09/28/6-days-to-go-railsgirls-istanbul</id>
   <content type="html"><![CDATA[<p>From railsgirls.com website:</p>

<blockquote>
<p>Our aim is to give tools and a community for women to understand technology
and to build their ideas. We do this by providing a great experience on
building things and by making technology more approachable.</p>
</blockquote>

<p>They have release [great guides][1] for step-by-step learning [Ruby on Rails][2].</p>

<p>October <strong>4</strong> and <strong>5</strong> is the date!</p>

<p>Event will start at <strong>18:00</strong> and its called <strong>Installation Party</strong>!</p>

<p>Where?</p>

<p>W3 Digital, Sıraselviler Caddesi 33/Bodrum Kat, Beyoğlu / İstanbul. </p>

<p>We’ll be there as webBox.io. We have a small presentation about <code>git</code> ford.</p>

<p>girls (8</p>

<iframe frameborder="0" height="500" marginheight="0" marginwidth="0" scrolling="no" src="https://maps.google.com/maps?ie=UTF8&amp;q=W3+Digital&amp;fb=1&amp;hq=W3+Digital&amp;cid=0,0,18399760062193237823&amp;hnear=&amp;t=m&amp;ll=41.038012,28.985238&amp;spn=0.008092,0.010707&amp;z=16&amp;iwloc=A&amp;output=embed" width="500"></iframe>
]]></content>
 </entry>
 
 <entry>
   <title>Mentorship service for Fit Startup Factory aka &quot;Girişim Fabrikası&quot;</title>
   <link href="http://blog.webbox.io/2013/09/20/mentorship-service-for-fit-startup-factory-aka-girisim-fabrikasi/"/>
   <updated>2013-09-20T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2013/09/20/mentorship-service-for-fit-startup-factory-aka-girisim-fabrikasi</id>
   <content type="html"><![CDATA[<p><img src="/assets/post_images/girisimfab/girisimfab1.jpg" alt="Girisim Fabrikasi 1"></p>

<p>We’ve announced this event on Tuesday (very short notice). There were approximately 20 people.</p>

<p><img src="/assets/post_images/girisimfab/girisimfab2.png" alt="Girisim Fabrikasi 2"></p>

<p>This was a small introduction to Modern Web Technologies. How to build quick landing
page without spending too much effort and time. How to choose minimal required
services and techniques.</p>

<p><img src="/assets/post_images/girisimfab/girisimfab3.jpg" alt="Girisim Fabrikasi 3"></p>

<p><a href="http://twitter.com/tortopoglu">Murat Tortopoğlu</a> introduced <a href="http://fitstartupfactory.com">ACCELERATOR PROGRAM</a> and 12 weeks schedule.</p>

<p><img src="/assets/post_images/girisimfab/girisimfab4.jpg" alt="Girisim Fabrikasi 4"></p>

<p>Most of the visitors were entrepreneurs except few developers. We met new
people, ate pizza and had fun!</p>

<p><a href="https://speakerdeck.com/webbox/girism-fabrikasi-hizlandirma-programi-merhaba">You can view our presentation in Turkish!</a></p>

<p>To apply <a href="http://fitstartupfactory.com">Fit Startup Factory</a>, please visit their site or check out their <a href="http://twitter.com/girisimfabrika">twitter account</a>.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Developer and Techno Entrepreneur Meeting @ Turkcell</title>
   <link href="http://blog.webbox.io/2013/09/20/developer-and-techno-entrepreneur-meeting-turkcell/"/>
   <updated>2013-09-20T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2013/09/20/developer-and-techno-entrepreneur-meeting-turkcell</id>
   <content type="html"><![CDATA[<p>This is a kind of service that helps Turkish speaking developers to learn
mobile development which includes iOS, Android, Windows Phone and Turkcell’s API.</p>

<p>It’s like lighter version of <a href="http://odeschool.com">Codeschool</a> but we believe this project will
grow very fast!. Site has also social features. You can connect with
your friends, win badges, attend challenges.</p>

<p>Mrs Sezin Mızraklı Güven made the welcome speech, introduced project outline and
its goals. After this, Mr Görkem Çetin has made a small demonstration
about how the system works.</p>

<p><img src="/assets/post_images/turkcell/turkcell1.jpg" alt="Turkcell 1"></p>

<p><strong>Görkem</strong> explains the project and gives some internal statistics. Turkcell
also provides database backend with <a href="http://usergrid.com">UserGrid</a>. They provide
<strong>1 million</strong> rows per month as free of charge! They provide iOS, Android,
JavaScript, Node.js, Ruby and C# drivers.</p>

<p><img src="/assets/post_images/turkcell/turkcell2.jpg" alt="Turkcell 2"></p>

<p>After Görkem, Mr Alaaddin Alpay explained how Turkish Partnership Network works.
They asked about our ideas, how to develop more features and provide more
valuable services for users.</p>

<p>We as webBox, really enjoyed this event. Met new people and enhanced our
professional network. We believe there will be more of these events in
the future.</p>

<p><img src="/assets/post_images/turkcell/turkcell3.jpg" alt="Turkcell 3"></p>
]]></content>
 </entry>
 
 <entry>
   <title>Check out our latest work: Autonomy</title>
   <link href="http://blog.webbox.io/2013/09/04/check-out-our-latest-work-autonomy/"/>
   <updated>2013-09-04T00:00:00+03:00</updated>
   <id>http://blog.webbox.io/2013/09/04/check-out-our-latest-work-autonomy</id>
   <content type="html"><![CDATA[<p><a href="http://autonomy.com.tr">http://autonomy.com.tr</a></p>

<p>Responsive design, full mobile compatible! Enjoy surfing on iOS devices and
other mobile / tablet devices. </p>

<p><img src="/assets/post_images/autonomy.png" alt="Autonomy"></p>
]]></content>
 </entry>
 

</feed>
